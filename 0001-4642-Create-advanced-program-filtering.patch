From 7a66662334f26195ff860c505bc014ce7268db7c Mon Sep 17 00:00:00 2001
From: Michael <michael@akvo.org>
Date: Tue, 27 Sep 2022 10:58:54 +0200
Subject: [PATCH 1/2] [#4642] Create advanced program filtering

[#4642] Coloring tag periods and fix total matches
[#4642] Set tag colour for countributors and countries
[#4642] Fix filtering sub contributors and undefined contributor countries

[#4642] Create program results endpoint

`/rest/v1/program/<program_id>/results/`

returns the result frameworks of the program and its contribution hierarchy

[#4642] Implement indicator_updates_by_period_id
[#4642] Adjust program results endpoint

Add attributes:
- indicator.target_values
- indicator.score_options
- period.target_values attributes

[#4642] Implement indicator_updates_by_period_id end point

Send request to backend after periods pane is open and
calculate aggregations value after contributor pane is open.

[#4642] Fix request contributors after filtering
[#4642] Fix bug select all partners not working
[#4642] Fix bug subproject percentage of update value
[#4642] Create sticky filter panel and split up some codes
[#4642] Create a new reducer: programRdr
[#4642] Fix query and split up some filter functions
[#4642] Fix undefined alfabet and filtering total is zero
[#4642] Fix colour not readable and chart not auto update
[#4642] Move filters state from local to global
---
 akvo/rest/urls.py                             |   6 +
 akvo/rest/views/__init__.py                   |   5 +-
 akvo/rest/views/indicator_period_data.py      |  26 ++
 akvo/rest/views/program_results.py            | 182 ++++++++++
 akvo/rest/views/project_overview.py           |   1 +
 akvo/rsr/dataclasses.py                       |   7 +-
 akvo/rsr/spa/app/components/SemiCircle.jsx    |  41 +++
 akvo/rsr/spa/app/components/filter/Filter.jsx |  77 +++++
 .../rsr/spa/app/components/filter/Filter.scss | 205 +++++++++++
 .../app/components/filter/FilterDropdown.jsx  |  65 ++++
 .../spa/app/components/filter/FilterForm.jsx  |  50 +++
 .../spa/app/components/filter/FilterInput.jsx |  50 +++
 .../spa/app/components/filter/FilterItems.jsx | 118 +++++++
 akvo/rsr/spa/app/components/filter/index.js   |   1 +
 akvo/rsr/spa/app/images/settings-icn.svg      |   5 +
 .../program-overview/DisaggregationsBar.jsx   |  58 ++++
 .../modules/program-overview/InitialView.jsx  |  90 +++++
 .../app/modules/program-overview/Program.jsx  | 325 ++++++++++++++++++
 .../program-overview/ProgramContributor.jsx   | 223 ++++++++++++
 .../program-overview/ProgramOverview.jsx      |  88 +++++
 .../modules/program-overview/ProgramView.jsx  | 287 ++++++++++++++++
 .../program-overview/ValueComments.jsx        |  22 ++
 .../modules/program-overview/action-types.js  |   5 +
 .../app/modules/program-overview/actions.js   |   9 +
 .../app/modules/program-overview/filters.js   |  70 ++++
 .../spa/app/modules/program-overview/query.js | 278 +++++++++++++++
 .../app/modules/program-overview/reducer.js   |  28 ++
 .../app/modules/program-overview/styles.scss  | 154 +++++++++
 .../app/modules/program-overview/transform.js |  14 +
 .../spa/app/modules/program/ProgramPeriod.jsx |   4 +-
 .../app/modules/program/ProjectSummary.jsx    |   8 +-
 .../rsr/spa/app/modules/program/indicator.jsx |   2 +-
 .../spa/app/modules/program/sticky-class.jsx  |   2 +-
 akvo/rsr/spa/app/modules/program/styles.scss  |  31 +-
 .../modules/results-admin/TobeReported.jsx    |   2 +-
 .../results-overview/ResultOverview.jsx       |   2 +-
 akvo/rsr/spa/app/modules/results/results.jsx  |   2 +-
 akvo/rsr/spa/app/root.jsx                     |   3 +-
 akvo/rsr/spa/app/store/config.js              |   2 +-
 akvo/rsr/spa/app/store/filter/action-types.js |   6 +
 akvo/rsr/spa/app/store/filter/actions.js      |  17 +
 akvo/rsr/spa/app/store/filter/reducer.js      |  57 +++
 akvo/rsr/spa/app/store/root-reducer.js        |   6 +-
 akvo/rsr/spa/app/styles/main.scss             |   2 +-
 akvo/rsr/spa/app/utils/misc.js                |  36 +-
 akvo/rsr/spa/app/utils/target-charts.jsx      |  52 +--
 akvo/rsr/spa/package-lock.json                |   5 +
 akvo/rsr/spa/package.json                     |   1 +
 .../tests/rest/test_indicator_period_data.py  |  60 ++++
 akvo/rsr/tests/utils.py                       |   3 +
 50 files changed, 2726 insertions(+), 67 deletions(-)
 create mode 100644 akvo/rest/views/program_results.py
 create mode 100644 akvo/rsr/spa/app/components/SemiCircle.jsx
 create mode 100644 akvo/rsr/spa/app/components/filter/Filter.jsx
 create mode 100644 akvo/rsr/spa/app/components/filter/Filter.scss
 create mode 100644 akvo/rsr/spa/app/components/filter/FilterDropdown.jsx
 create mode 100644 akvo/rsr/spa/app/components/filter/FilterForm.jsx
 create mode 100644 akvo/rsr/spa/app/components/filter/FilterInput.jsx
 create mode 100644 akvo/rsr/spa/app/components/filter/FilterItems.jsx
 create mode 100644 akvo/rsr/spa/app/components/filter/index.js
 create mode 100644 akvo/rsr/spa/app/images/settings-icn.svg
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/DisaggregationsBar.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/InitialView.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/Program.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/ProgramContributor.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/ProgramOverview.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/ProgramView.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/ValueComments.jsx
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/action-types.js
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/actions.js
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/filters.js
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/query.js
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/reducer.js
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/styles.scss
 create mode 100644 akvo/rsr/spa/app/modules/program-overview/transform.js
 create mode 100644 akvo/rsr/spa/app/store/filter/action-types.js
 create mode 100644 akvo/rsr/spa/app/store/filter/actions.js
 create mode 100644 akvo/rsr/spa/app/store/filter/reducer.js

diff --git a/akvo/rest/urls.py b/akvo/rest/urls.py
index e278bd397..5bf493922 100644
--- a/akvo/rest/urls.py
+++ b/akvo/rest/urls.py
@@ -311,6 +311,12 @@ urlpatterns += (
     url(r'v1/program/(?P<program_pk>[0-9]+)/updates/$',
         views.program_updates,
         name='program_updates'),
+    url(r'v1/program/(?P<program_pk>[0-9]+)/results/$',
+        views.get_program_results,
+        name='get_program_results'),
+    url(r'v1/program/(?P<program_pk>[0-9]+)/indicator_updates_by_period_id/$',
+        views.indicator_updates_by_period_id,
+        name='indicator_updates_by_period_id'),
 )
 
 
diff --git a/akvo/rest/views/__init__.py b/akvo/rest/views/__init__.py
index 279981309..a9680e497 100644
--- a/akvo/rest/views/__init__.py
+++ b/akvo/rest/views/__init__.py
@@ -36,7 +36,8 @@ from .indicator_period import (IndicatorPeriodViewSet, IndicatorPeriodFrameworkV
                                set_periods_locked, bulk_add_periods, bulk_remove_periods)
 from .indicator_period_data import (IndicatorPeriodDataViewSet, IndicatorPeriodDataFrameworkViewSet,
                                     IndicatorPeriodDataCommentViewSet, indicator_upload_file,
-                                    period_update_files, period_update_photos, set_updates_status)
+                                    period_update_files, period_update_photos, set_updates_status,
+                                    indicator_updates_by_period_id)
 from .indicator_period_disaggregation import IndicatorPeriodDisaggregationViewSet
 from .disaggregation import DisaggregationViewSet
 from .disaggregation_target import DisaggregationTargetViewSet
@@ -107,6 +108,7 @@ from .typeahead import (typeahead_organisation,
 from .user import UserViewSet, change_password, update_details, current_user
 from .user_management import invite_user
 from .project_overview import project_results, project_result_overview, project_indicator_overview
+from .program_results import get_program_results
 from .program_results_geo import get_program_results_geo
 from .project_enumerators import assignment_send, project_enumerators
 from .demo_request import demo_request
@@ -242,6 +244,7 @@ __all__ = [
     'upload_indicator_update_photo',
     'UserViewSet',
     'project_results',
+    'get_program_results',
     'get_program_results_geo',
     'project_result_overview',
     'project_indicator_overview',
diff --git a/akvo/rest/views/indicator_period_data.py b/akvo/rest/views/indicator_period_data.py
index 47130bba9..bab9ae186 100644
--- a/akvo/rest/views/indicator_period_data.py
+++ b/akvo/rest/views/indicator_period_data.py
@@ -302,3 +302,29 @@ def set_updates_status(request, project_pk):
             change_message=json.dumps(log_data)
         )
     return Response({'success': True})
+
+
+@api_view(['GET'])
+@authentication_classes([SessionAuthentication, TastyTokenAuthentication])
+def indicator_updates_by_period_id(request, program_pk):
+    program = get_object_or_404(Project, pk=program_pk)
+    user = request.user
+    if not user.has_perm('rsr.view_project', program):
+        return HttpResponseForbidden()
+    period_ids = {id for id in request.GET.get('ids', '').split(',') if id}
+    contributors = program.descendants()
+    queryset = IndicatorPeriodData.objects\
+        .select_related(
+            'period',
+            'user',
+            'approved_by',
+        ).prefetch_related(
+            'comments',
+            'disaggregations',
+        ).filter(
+            status=IndicatorPeriodData.STATUS_APPROVED_CODE,
+            period__indicator__result__project__in=contributors,
+            period__in=period_ids
+        )
+    serializer = IndicatorPeriodDataFrameworkSerializer(queryset, many=True)
+    return Response(serializer.data)
diff --git a/akvo/rest/views/program_results.py b/akvo/rest/views/program_results.py
new file mode 100644
index 000000000..1c4552a54
--- /dev/null
+++ b/akvo/rest/views/program_results.py
@@ -0,0 +1,182 @@
+# -*- coding: utf-8 -*-
+
+# Akvo RSR is covered by the GNU Affero General Public License.
+
+# See more details in the license.txt file located at the root folder of the Akvo RSR module.
+# For additional details on the GNU license please see < http://www.gnu.org/licenses/agpl.html >.
+
+
+from akvo.rest.authentication import TastyTokenAuthentication
+from akvo.rsr.dataclasses import ResultData, IndicatorData, PeriodData, ContributorData
+from akvo.rsr.models import Project, IndicatorPeriod
+from akvo.rsr.models.result.utils import QUANTITATIVE
+from django.shortcuts import get_object_or_404
+from rest_framework.authentication import SessionAuthentication
+from rest_framework.decorators import api_view, authentication_classes
+from rest_framework.response import Response
+from rest_framework.status import HTTP_403_FORBIDDEN
+
+
+@api_view(['GET'])
+@authentication_classes([SessionAuthentication, TastyTokenAuthentication])
+def get_program_results(request, program_pk):
+    queryset = Project.objects.prefetch_related('results')
+    program = get_object_or_404(queryset, pk=program_pk)
+    if not request.user.has_perm('rsr.view_project', program):
+        return Response('Request not allowed', status=HTTP_403_FORBIDDEN)
+    results = get_results_framework(program)
+    data = {
+        'id': program.id,
+        'title': program.title,
+        'targets_at': program.targets_at,
+        'results': [
+            {
+                'id': result.id,
+                'title': result.title,
+                'type': result.iati_type_name,
+                'indicators': [
+                    {
+                        'id': indicator.id,
+                        'title': indicator.title,
+                        'type': 'quantitative' if indicator.type == QUANTITATIVE else 'qualitative',
+                        'target_value': indicator.target_value,
+                        'score_options': indicator.scores,
+                        'periods': [
+                            {
+                                'id': period.id,
+                                'period_start': period.period_start,
+                                'period_end': period.period_end,
+                                'target_value': period.target_value,
+                                'contributors': format_contributors(period.contributors),
+                            }
+                            for period in indicator.periods
+                        ],
+                    } for indicator in result.indicators
+                ],
+            }
+            for result in results
+        ],
+    }
+    return Response(data)
+
+
+def format_contributors(contributors):
+    return [format_contributor(c) for c in contributors if c.project.aggregate_to_parent]
+
+
+def format_contributor(contributor):
+    return {
+        'id': contributor.id,
+        'project_id': contributor.project.id,
+        'project_title': contributor.project.title,
+        'project_subtitle': contributor.project.subtitle,
+        'country': {'iso_code': contributor.project.country_code} if contributor.project.country_code else None,
+        'partners': {k: v for k, v in contributor.project.partners.items()},
+        'contributors': format_contributors(contributor.contributors) if contributor.project.aggregate_children else []
+    }
+
+
+def get_results_framework(program):
+    raw_periods = fetch_periods(program)
+    lookup = {
+        'results': {},
+        'indicators': {},
+        'periods': {},
+    }
+    for r in raw_periods:
+        result_id = r['indicator__result__id']
+        indicator_id = r['indicator__id']
+        period_id = r['id']
+        if result_id not in lookup['results']:
+            lookup['results'][result_id] = ResultData.make(r, 'indicator__result__')
+        result = lookup['results'][result_id]
+        if indicator_id not in lookup['indicators']:
+            indicator = IndicatorData.make(r, 'indicator__')
+            result.indicators.append(indicator)
+            lookup['indicators'][indicator_id] = indicator
+        else:
+            indicator = lookup['indicators'][indicator_id]
+        if period_id not in lookup['periods']:
+            period = PeriodData.make(r)
+            indicator.periods.append(period)
+            lookup['periods'][period_id] = period
+    contributors = get_contributors(lookup['periods'].keys())
+    for c in contributors:
+        period_id = c.parent
+        if period_id in lookup['periods']:
+            lookup['periods'][period_id].contributors.append(c)
+    return lookup['results'].values()
+
+
+def fetch_periods(program):
+    return IndicatorPeriod.objects\
+        .select_related('indicator', 'indicator__result')\
+        .filter(indicator__result__project=program)\
+        .order_by('indicator__result__order', 'indicator__order', '-period_start')\
+        .values(
+            'id', 'period_start', 'period_end', 'target_value', 'indicator__id',
+            'indicator__title', 'indicator__type', 'indicator__target_value', 'indicator__scores',
+            'indicator__result__id', 'indicator__result__title', 'indicator__result__type'
+        )
+
+
+def get_contributors(root_period_ids):
+    flat_contributors = get_flat_contributors(root_period_ids)
+    return hierarchize_contributors(flat_contributors)
+
+
+def get_flat_contributors(root_period_ids):
+    lookup = {}
+    raw_contributors = fetch_contributors(root_period_ids)
+    for c in raw_contributors:
+        contributor_id = c['id']
+        partner_id = c['indicator__result__project__partners__id']
+        if contributor_id not in lookup:
+            contributor = ContributorData.make(c)
+            lookup[contributor_id] = contributor
+        contributor = lookup[contributor_id]
+        if partner_id not in contributor.project.partners:
+            contributor.project.partners[partner_id] = c['indicator__result__project__partners__name']
+    return lookup.values()
+
+
+def fetch_contributors(root_period_ids):
+    contributor_ids = fetch_contributor_ids(root_period_ids)
+    return IndicatorPeriod.objects\
+        .select_related('indicator__result__project')\
+        .prefetch_related('indicator__result__project__partners')\
+        .filter(id__in=contributor_ids)\
+        .values(
+            'id', 'parent_period',
+            'indicator__result__project__id',
+            'indicator__result__project__title',
+            'indicator__result__project__subtitle',
+            'indicator__result__project__aggregate_children',
+            'indicator__result__project__aggregate_to_parent',
+            'indicator__result__project__primary_location__country__iso_code',
+            'indicator__result__project__partners__id',
+            'indicator__result__project__partners__name',
+        )
+
+
+def fetch_contributor_ids(root_period_ids):
+    family = set(root_period_ids)
+    while True:
+        children = IndicatorPeriod.objects.filter(parent_period__in=family).values_list('id', flat=True)
+        if family.union(children) == family:
+            break
+        family = family.union(children)
+    return family - root_period_ids
+
+
+def hierarchize_contributors(contributors):
+    tops = []
+    lookup = {it.id: it for it in contributors}
+    ids = lookup.keys()
+    for contributor in contributors:
+        parent = contributor.parent
+        if not parent or parent not in ids:
+            tops.append(contributor)
+        else:
+            lookup[parent].contributors.append(contributor)
+    return tops
diff --git a/akvo/rest/views/project_overview.py b/akvo/rest/views/project_overview.py
index 22ab1ae3a..d633648a1 100644
--- a/akvo/rest/views/project_overview.py
+++ b/akvo/rest/views/project_overview.py
@@ -251,6 +251,7 @@ def get_flat_contributors(root_result_ids: List[int]):
         if contributor_id not in lookup:
             contributor = ContributingResultData.make(c)
             lookup[contributor_id] = contributor
+        contributor = lookup[contributor_id]
         if partner_id not in contributor.project.partners:
             contributor.project.partners[partner_id] = c['project__partners__name']
     return lookup.values()
diff --git a/akvo/rsr/dataclasses.py b/akvo/rsr/dataclasses.py
index 10c0590c1..697313092 100644
--- a/akvo/rsr/dataclasses.py
+++ b/akvo/rsr/dataclasses.py
@@ -9,7 +9,7 @@ from dataclasses import dataclass, field
 from datetime import date
 from decimal import Decimal
 from functools import cached_property, lru_cache
-from typing import Optional, List, Set
+from typing import Optional, List, Set, Dict
 
 from akvo.rsr.models import IndicatorPeriodData
 from akvo.rsr.models.result.utils import QUANTITATIVE, QUALITATIVE, PERCENTAGE_MEASURE, calculate_percentage
@@ -97,8 +97,10 @@ class ContributorProjectData(object):
     title: str = ''
     subtitle: str = ''
     country: Optional[str] = None
+    country_code: Optional[str] = None
     aggregate_children: bool = True
     aggregate_to_parent: bool = True
+    partners: Dict[int, str] = field(default_factory=dict)
     sectors: Set[str] = field(default_factory=set)
 
     @classmethod
@@ -108,6 +110,7 @@ class ContributorProjectData(object):
             title=data.get(f"{prefix}title", ''),
             subtitle=data.get(f"{prefix}subtitle", ''),
             country=data.get(f"{prefix}primary_location__country__name", None),
+            country_code=data.get(f"{prefix}primary_location__country__iso_code", None),
             aggregate_children=data.get(f"{prefix}aggregate_children", True),
             aggregate_to_parent=data.get(f"{prefix}aggregate_to_parent", True),
         )
@@ -441,6 +444,7 @@ class IndicatorData(object):
     baseline_comment: str = ''
     target_value: Optional[Decimal] = None
     target_comment: str = ''
+    scores: List[str] = field(default_factory=list)
     periods: List[PeriodData] = field(default_factory=list)
 
     @classmethod
@@ -456,6 +460,7 @@ class IndicatorData(object):
             baseline_comment=data.get(f"{prefix}baseline_comment", ''),
             target_value=data.get(f"{prefix}target_value", None),
             target_comment=data.get(f"{prefix}target_comment", None),
+            scores=data.get(f"{prefix}scores", []),
         )
 
     @cached_property
diff --git a/akvo/rsr/spa/app/components/SemiCircle.jsx b/akvo/rsr/spa/app/components/SemiCircle.jsx
new file mode 100644
index 000000000..bb4191491
--- /dev/null
+++ b/akvo/rsr/spa/app/components/SemiCircle.jsx
@@ -0,0 +1,41 @@
+import React, { useEffect, useRef } from 'react'
+import Chart from 'chart.js'
+
+const SemiCircle = ({ percent }) => {
+  const canvasRef = useRef(null)
+
+  const handleOnSetData = amount => [amount, 100 - amount]
+
+  useEffect(() => {
+    const _chart = new Chart(canvasRef.current, {
+      type: 'doughnut',
+      data: {
+        datasets: [
+          {
+            data: handleOnSetData(percent),
+            backgroundColor: ['#389a90', '#e1eded'],
+            hoverBorderWidth: 3,
+            hoverBorderColor: '#fff',
+            hoverBackgroundColor: ['#389a90', '#e1eded']
+          }
+        ],
+        labels: []
+      },
+      options: {
+        cutoutPercentage: 37,
+        circumference: Math.PI,
+        rotation: -Math.PI,
+        tooltips: {
+          enabled: false
+        },
+        legend: {
+          display: false
+        }
+      }
+    })
+    return () => _chart.destroy()
+  })
+  return <canvas width={150} height={68} ref={ref => { canvasRef.current = ref }} />
+}
+
+export default SemiCircle
diff --git a/akvo/rsr/spa/app/components/filter/Filter.jsx b/akvo/rsr/spa/app/components/filter/Filter.jsx
new file mode 100644
index 000000000..8841d87c2
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/Filter.jsx
@@ -0,0 +1,77 @@
+import React from 'react'
+import {
+  Row,
+  Col,
+  Icon,
+  Button,
+  Typography,
+  Tag
+} from 'antd'
+import classNames from 'classnames'
+import './Filter.scss'
+
+import FilterItems from './FilterItems'
+import FilterDropdown from './FilterDropdown'
+import FilterInput from './FilterInput'
+
+const { Title, Text } = Typography
+
+const Filter = ({ children, id, ...props }) => (
+  <Row {...props} id="rsr-advanced-filter">
+    {children}
+  </Row>
+)
+
+const FilterInfo = ({
+  isFiltering = false,
+  label = 'Items',
+  amount,
+  loading,
+  children,
+  onClear
+}) => (
+  <Col className="filter-tags">
+    <div className="d-flex">
+      <div className="info">
+        <div className="d-flex">
+          <span className="text-right">
+            <Title level={2}>
+              {loading ? '...' : amount}
+            </Title>
+          </span>
+          <span style={{ marginBottom: 15 }}>
+            <Text strong>{isFiltering ? 'Matches' : label}</Text>
+          </span>
+        </div>
+      </div>
+      <Row type="flex" align="middle" justify="space-between" className={classNames('w-full', { 'd-none': !isFiltering })}>
+        <Col lg={20} style={{ padding: 8, minHeight: 83 }}>
+          {children}
+        </Col>
+        <Col lg={2} md={3} sm={4}>
+          {isFiltering && (
+            <Button type="link" className="btn-clear-all" onClick={onClear}>
+              Clear all
+              <Icon type="close-circle" />
+            </Button>
+          )}
+        </Col>
+      </Row>
+    </div>
+  </Col>
+)
+
+const FilterTag = ({ children, onClose, ...props }) => (
+  <Tag {...props}>
+    <Icon type="close" onClick={onClose} />
+    {children}
+  </Tag>
+)
+
+Filter.Input = FilterInput
+Filter.Info = FilterInfo
+Filter.Tag = FilterTag
+Filter.Items = FilterItems
+Filter.Dropdown = FilterDropdown
+
+export default Filter
diff --git a/akvo/rsr/spa/app/components/filter/Filter.scss b/akvo/rsr/spa/app/components/filter/Filter.scss
new file mode 100644
index 000000000..8d8887824
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/Filter.scss
@@ -0,0 +1,205 @@
+#rsr-advanced-filter {
+  .filter-tags {
+    background-color: #f5f5f5;
+    margin-top: 8px;
+    border: 1px solid #d9d9d9;
+    .btn-clear-all {
+      color: #212121;
+      & > span {
+        font-weight: 600;
+      }
+    }
+    .d-flex {
+      display: flex;
+      align-items: center;
+      justify-content: start;
+      gap: 10px;
+      margin: 0 8px;
+    }
+    .info {
+      border-right: 2px solid #212121;
+      padding: 0 8px;
+      .d-flex {
+        display: flex;
+        align-items: center;
+        justify-content: start;
+        gap: 10px;
+      }
+    }
+  }
+  .w-full {
+    width: 100%;
+  }
+  .filter-search {
+    .ant-input-group-addon {
+      cursor: pointer;
+    }
+  }
+  .filter-selected-bar {
+    display: flex;
+    align-items: center;
+    justify-content: flex-start;
+    background-color: #eae9ea;
+    &.flex-between {
+      justify-content: space-between;
+      margin-top: 16px;
+    }
+    div.bar-column {
+      min-height: 68px;
+      display: flex;
+      flex-direction: column;
+      justify-content: center;
+      padding: 8px 0;
+      margin-right: 16px;
+      border-right: 2px solid #212121;
+      border-image: linear-gradient(to bottom, #eae9ea 20%, #212121 20%, #212121 80%, #eae9ea 80%);
+      border-image-slice: 1;
+      &:first-of-type {
+        border-image: none;
+      }
+      &:last-of-type {
+        border-right: none;
+      }
+      .ant-btn-link > .anticon-close-circle,
+      .ant-btn-link > span {
+        color: #212121;
+        font-size: 12px;
+      }
+      .ant-row {
+        margin-bottom: 8px;
+        .ant-col {
+          &.title {
+            margin-bottom: 4px;
+          }
+          .ant-tag {
+            max-width: 250px;
+            text-overflow: ellipsis;
+            white-space: nowrap;
+            overflow: hidden;
+            margin-bottom: 2px;
+          }
+        }
+      }
+      .ant-row-flex {
+        margin-right: 8px;
+      }
+      .info {
+        min-height: 68px;
+        padding: 4px 16px;
+        display: flex;
+        align-items: center;
+        justify-content: flex-start;
+        gap: 8px;
+        h2 {
+          margin-bottom: 0 !important;
+        }
+      }
+      strong {
+        font-size: 12px;
+        color: #212121;
+      }
+    }
+  }
+}
+#rsr-filter-items-card {
+  .ant-card-body {
+    padding: 16px;
+    div.ant-typography,
+    span.ant-typography > strong,
+    .ant-checkbox-wrapper > span,
+    li > .ant-btn-link {
+      font-size: 12px;
+      color: #2c2f53;
+    }
+    .row-selected {
+      max-width: 327px;
+      width: 100%;
+      height: 32px;
+      margin-top: 16px;
+      overflow: auto;
+      white-space: nowrap;
+      .ant-tag {
+        max-width: 200px;
+        text-overflow: ellipsis;
+        overflow: hidden;
+        cursor: pointer;
+        position: relative;
+        padding-right: 25px;
+        .anticon-close {
+          position: absolute;
+          top: 5px;
+          right: 0;
+        }
+      }
+    }
+    .row-items {
+      height: 180px;
+      overflow-y: scroll;
+      overflow-x: hidden;
+      margin: 16px 0;
+      .alfabet {
+        padding-top: 8px;
+      }
+      .filter-options {
+        li {
+          &.selected {
+            background-color: #e6f7ff;
+            border-left: 2px solid #1890ff;
+          }
+          .ant-btn-block {
+            text-align: left;
+          }
+        }
+      }
+    }
+    .row-search-bar {
+      margin: 16px 0;
+    }
+    .row-footer {
+      margin-top: 1em !important;
+      background-color: #ffffff;
+      position: sticky;
+      bottom: 0;
+    }
+    .text-right {
+      text-align: right;
+    }
+  }
+}
+.country-filter {
+  width: 100%;
+}
+.title-filter {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  height: 45px;
+  .ant-typography {
+    margin-left: 16px;
+  }
+}
+.total-filter {
+  background-color: #2b2f56;
+  border-radius: 5px;
+  display: flex;
+  justify-content: space-between;
+  h4.ant-typography,
+  .ant-icon {
+    color: #fff;
+  }
+}
+.collapse-filter {
+  margin-top: 12px;
+}
+.header-panel-filter {
+  display: flex;
+  gap: 8px;
+  justify-content: flex-start;
+  align-items: center;
+}
+.badge-filter {
+  .ant-badge-count {
+    background-color: #1890ff;
+  }
+  color: #fff;
+}
diff --git a/akvo/rsr/spa/app/components/filter/FilterDropdown.jsx b/akvo/rsr/spa/app/components/filter/FilterDropdown.jsx
new file mode 100644
index 000000000..0db99ba29
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/FilterDropdown.jsx
@@ -0,0 +1,65 @@
+import React, { useState, useEffect } from 'react'
+import { Col, Row, Select } from 'antd'
+import FilterForm from './FilterForm'
+
+const { Option } = Select
+
+const FilterDropdown = ({
+  data = [],
+  picked = [],
+  mode = 'multiple',
+  title,
+  onSetItems,
+  onCancel,
+  onApply
+}) => {
+  const [selected, setSelected] = useState([])
+
+  const handleOnSelectAll = (e) => {
+    if (e.target.checked) {
+      setSelected(data)
+      onSetItems(data)
+    } else {
+      setSelected([])
+      onSetItems([])
+    }
+  }
+
+  useEffect(() => {
+    if (picked && picked.length !== selected.length) {
+      setSelected([])
+    }
+  }, [picked, selected])
+  return (
+    <FilterForm
+      title={title}
+      onCancel={onCancel}
+      onApply={onApply}
+      onUndo={() => {
+        onSetItems([])
+        setSelected([])
+      }}
+      onSelectAll={handleOnSelectAll}
+    >
+      <Row>
+        <Col>
+          <Select
+            mode={mode}
+            value={selected}
+            onChange={(values) => {
+              setSelected(values)
+              onSetItems(values)
+            }}
+            style={{
+              width: '100%'
+            }}
+          >
+            {data?.map(d => <Option key={d} value={d}>{d}</Option>)}
+          </Select>
+        </Col>
+      </Row>
+    </FilterForm>
+  )
+}
+
+export default FilterDropdown
diff --git a/akvo/rsr/spa/app/components/filter/FilterForm.jsx b/akvo/rsr/spa/app/components/filter/FilterForm.jsx
new file mode 100644
index 000000000..227839659
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/FilterForm.jsx
@@ -0,0 +1,50 @@
+import React from 'react'
+import {
+  Typography,
+  Input,
+  Card,
+  Col,
+  Row,
+  Button,
+  Checkbox,
+} from 'antd'
+
+const { Text } = Typography
+const { Search } = Input
+
+const FilterForm = ({
+  title,
+  search,
+  children,
+  onCancel,
+  onApply,
+  onSearch,
+  onSelectAll
+}) => {
+  return (
+    <Card id="rsr-filter-items-card">
+      <Row type="flex" justify="space-between" align="middle" className="row-header" gutter={[8, 24]}>
+        <Col lg={16} md={24} sm={16} xs={16}>{title && <Text strong>{title}</Text>}</Col>
+        <Col lg={8} md={16} sm={8} xs={8} className="text-right">
+          Select All <Checkbox name="selectAll" onClick={onSelectAll} />
+        </Col>
+      </Row>
+      <Row className="row-search-bar">
+        <Col>
+          <Search placeholder="Search for..." value={search} onChange={(e) => onSearch(e.target.value)} allowClear />
+        </Col>
+      </Row>
+      {children}
+      <Row type="flex" justify="end" align="middle" className="row-footer" gutter={[8, 8]}>
+        <Col span={6}>
+          <Button type="link" size="small" onClick={onCancel} block>Cancel</Button>
+        </Col>
+        <Col span={6}>
+          <Button size="small" type="primary" onClick={onApply} block>Apply</Button>
+        </Col>
+      </Row>
+    </Card>
+  )
+}
+
+export default FilterForm
diff --git a/akvo/rsr/spa/app/components/filter/FilterInput.jsx b/akvo/rsr/spa/app/components/filter/FilterInput.jsx
new file mode 100644
index 000000000..db7885c4d
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/FilterInput.jsx
@@ -0,0 +1,50 @@
+import React from 'react'
+import {
+  Col,
+  Icon,
+  Input,
+  Badge,
+} from 'antd'
+import SVGInline from 'react-svg-inline'
+
+import settingsIcon from '../../images/settings-icn.svg'
+
+const PopOverButton = ({ visible, onPopOver, count = 0 }) => visible
+  ? <Icon type="close" style={{ fontSize: 24 }} onClick={onPopOver} />
+  : (
+    <div style={{ paddingTop: 8, display: 'flex', gap: 8, justifyContent: 'center' }}>
+      <Badge count={count} style={{ backgroundColor: '#1890ff', color: '#fff' }}>
+        <SVGInline svg={settingsIcon} onClick={onPopOver} />
+      </Badge>
+    </div>
+  )
+
+const FilterInput = React.forwardRef(({
+  visible = false,
+  children,
+  loading,
+  onPopOver,
+  count,
+  ...props
+}, ref) => (
+  <Col className="filter-search">
+    <Input
+      {...props}
+      size="large"
+      ref={ref}
+      prefix={<Icon type="search" />}
+      addonAfter={(
+        <>
+          {
+            loading
+              ? <Icon type="loading" style={{ fontSize: 24 }} spin />
+              : <PopOverButton {...{ visible, onPopOver, count }} />
+          }
+        </>
+      )}
+      allowClear
+    />
+  </Col>
+))
+
+export default FilterInput
diff --git a/akvo/rsr/spa/app/components/filter/FilterItems.jsx b/akvo/rsr/spa/app/components/filter/FilterItems.jsx
new file mode 100644
index 000000000..2b3f3d451
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/FilterItems.jsx
@@ -0,0 +1,118 @@
+import React, { useEffect, useState } from 'react'
+import {
+  Typography,
+  Col,
+  Row,
+  Button,
+  Tag,
+  Icon,
+} from 'antd'
+import classNames from 'classnames'
+import groupBy from 'lodash/groupBy'
+import FilterForm from './FilterForm'
+import { getFirstLetter } from '../../utils/misc'
+
+const { Text } = Typography
+
+const FilterItems = ({
+  data = [],
+  picked = [],
+  title = '',
+  isGrouped = false,
+  onSetItems,
+  onApply
+}) => {
+  const pickedItems = picked?.map((p) => p?.id)
+
+  const [selected, setSelected] = useState(pickedItems)
+  const [search, setSearch] = useState(null)
+
+  const handleOnSelect = (id) => {
+    const modified =
+      selected.includes(id)
+        ? selected.filter((s) => s !== id)
+        : [...selected, id]
+    onSetItems(modified)
+  }
+  const handleOnSelectAll = (e) => {
+    if (e.target.checked) {
+      const items = data?.map((d) => d?.id)
+      onSetItems(items)
+    } else {
+      onSetItems([])
+    }
+  }
+  const options = isGrouped
+    ? groupBy(
+      data
+        ?.filter((d) => search ? d?.value?.toLowerCase()?.includes(search.toLowerCase()) : d)
+        ?.map((d) => ({ ...d, alfabet: getFirstLetter(d.value)?.toUpperCase() }))
+        ?.sort((a, b) => a?.alfabet?.localeCompare(b.alfabet)),
+      'alfabet'
+    )
+    : data
+
+  useEffect(() => {
+    if (pickedItems.length !== selected.length) {
+      setSelected(pickedItems)
+    }
+  }, [pickedItems, selected])
+  return (
+    <FilterForm
+      search={search}
+      title={title}
+      onCancel={() => {
+        onSetItems([])
+      }}
+      onApply={onApply}
+      onUndo={() => setSelected([])}
+      onSelectAll={handleOnSelectAll}
+      onSearch={setSearch}
+    >
+      <div className={classNames({ 'row-selected': (picked?.length > 0) })}>
+        {picked?.map((it, dx) => (
+          <Tag key={dx} onClick={() => handleOnSelect(it?.id)}>
+            <span>{`${it?.value} `}</span>
+            <Icon type="close" />
+          </Tag>
+        ))}
+      </div>
+      <div className="row-items">
+        {
+          isGrouped
+            ? Object.keys(options)?.map((key) => (
+              <Row type="flex" align="top" justify="start" key={key}>
+                <Col lg={2} md={2} sm={24} xs={24} className="alfabet">
+                  <Text strong>{key}</Text>
+                </Col>
+                <Col lg={22} md={22} sm={24} xs={24}>
+                  <ul className="filter-options">
+                    {options[key]?.map((option, vx) => (
+                      <li key={vx} className={classNames({ selected: selected.includes(option.id) })}>
+                        <Button type="link" onClick={() => handleOnSelect(option.id)} block>{option?.value}</Button>
+                      </li>
+                    ))}
+                  </ul>
+                </Col>
+              </Row>
+            ))
+            : (
+              <Row>
+                <Col>
+                  <ul className="filter-options">
+                    {options.map((option, vx) => (
+                      <li key={vx} className={classNames({ selected: selected.includes(option.id) })}>
+                        <Button type="link" onClick={() => handleOnSelect(option.id)} block>{option?.value}</Button>
+                      </li>
+                    ))}
+                  </ul>
+                </Col>
+              </Row>
+            )
+        }
+      </div>
+    </FilterForm>
+  )
+}
+
+export default FilterItems
diff --git a/akvo/rsr/spa/app/components/filter/index.js b/akvo/rsr/spa/app/components/filter/index.js
new file mode 100644
index 000000000..bf932bdab
--- /dev/null
+++ b/akvo/rsr/spa/app/components/filter/index.js
@@ -0,0 +1 @@
+export { default } from './Filter'
diff --git a/akvo/rsr/spa/app/images/settings-icn.svg b/akvo/rsr/spa/app/images/settings-icn.svg
new file mode 100644
index 000000000..75898f70d
--- /dev/null
+++ b/akvo/rsr/spa/app/images/settings-icn.svg
@@ -0,0 +1,5 @@
+<svg width="24" height="24" viewBox="0 0 18 20" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M3.43939 9.81299V0.867004C3.43939 0.637062 3.34805 0.416531 3.18546 0.253937C3.02286 0.0913427 2.80236 0 2.57242 0C2.34248 0 2.12194 0.0913427 1.95935 0.253937C1.79676 0.416531 1.70541 0.637062 1.70541 0.867004V9.81299C1.20631 9.99113 0.774491 10.3193 0.469177 10.7524C0.163864 11.1856 0 11.7025 0 12.2325C0 12.7624 0.163864 13.2794 0.469177 13.7126C0.774491 14.1457 1.20631 14.4739 1.70541 14.652V18.133C1.70541 18.3629 1.79676 18.5835 1.95935 18.7461C2.12194 18.9087 2.34248 19 2.57242 19C2.80236 19 3.02286 18.9087 3.18546 18.7461C3.34805 18.5835 3.43939 18.3629 3.43939 18.133V14.65C3.93849 14.4719 4.37032 14.1437 4.67563 13.7106C4.98094 13.2774 5.14481 12.7604 5.14481 12.2305C5.14481 11.7006 4.98094 11.1836 4.67563 10.7504C4.37032 10.3173 3.93849 9.98915 3.43939 9.811V9.81299ZM2.57242 13.069C2.40688 13.069 2.24504 13.0199 2.10739 12.9279C1.96975 12.836 1.86245 12.7052 1.7991 12.5523C1.73575 12.3994 1.7192 12.2311 1.7515 12.0687C1.78379 11.9063 1.8635 11.7572 1.98056 11.6401C2.09762 11.5231 2.24676 11.4434 2.40912 11.4111C2.57148 11.3788 2.73976 11.3954 2.8927 11.4587C3.04564 11.5221 3.17637 11.6293 3.26834 11.767C3.36031 11.9046 3.40939 12.0665 3.40939 12.232C3.40913 12.4539 3.32088 12.6666 3.16397 12.8235C3.00706 12.9805 2.79432 13.0687 2.57242 13.069V13.069Z" fill="#2B2F56"/>
+<path d="M9.71286 3.71399V0.867004C9.71286 0.637062 9.62152 0.416531 9.45892 0.253937C9.29633 0.0913427 9.0758 0 8.84586 0C8.61591 0 8.39538 0.0913427 8.23279 0.253937C8.07019 0.416531 7.97885 0.637062 7.97885 0.867004V3.71399C7.47975 3.89213 7.04796 4.22026 6.74265 4.65341C6.43733 5.08657 6.27344 5.60354 6.27344 6.13348C6.27344 6.66343 6.43733 7.1804 6.74265 7.61356C7.04796 8.04671 7.47975 8.37487 7.97885 8.55301V18.134C7.97885 18.3639 8.07019 18.5845 8.23279 18.7471C8.39538 18.9097 8.61591 19.001 8.84586 19.001C9.0758 19.001 9.29633 18.9097 9.45892 18.7471C9.62152 18.5845 9.71286 18.3639 9.71286 18.134V8.54999C10.212 8.37184 10.6438 8.04372 10.9491 7.61057C11.2544 7.17741 11.4183 6.66043 11.4183 6.13049C11.4183 5.60055 11.2544 5.08357 10.9491 4.65042C10.6438 4.21727 10.212 3.88914 9.71286 3.711V3.71399ZM8.84485 6.97C8.67931 6.97 8.51747 6.92092 8.37982 6.82895C8.24218 6.73698 8.13491 6.60625 8.07156 6.45331C8.00821 6.30037 7.99163 6.13206 8.02393 5.9697C8.05622 5.80733 8.13593 5.65819 8.25299 5.54114C8.37005 5.42408 8.51919 5.34437 8.68155 5.31207C8.84391 5.27978 9.01222 5.29636 9.16516 5.35971C9.3181 5.42306 9.44883 5.53032 9.5408 5.66797C9.63277 5.80561 9.68185 5.96745 9.68185 6.133C9.68159 6.3549 9.59331 6.56764 9.4364 6.72455C9.27949 6.88146 9.06675 6.96974 8.84485 6.97V6.97Z" fill="#2B2F56"/>
+<path d="M15.9843 9.078V0.867004C15.9843 0.637062 15.893 0.416531 15.7304 0.253937C15.5678 0.0913427 15.3473 0 15.1173 0C14.8874 0 14.6669 0.0913427 14.5043 0.253937C14.3417 0.416531 14.2503 0.637062 14.2503 0.867004V9.078C13.7512 9.25615 13.3194 9.58427 13.0141 10.0174C12.7088 10.4506 12.5449 10.9676 12.5449 11.4975C12.5449 12.0274 12.7088 12.5444 13.0141 12.9776C13.3194 13.4107 13.7512 13.7388 14.2503 13.917V18.133C14.2503 18.3629 14.3417 18.5835 14.5043 18.7461C14.6669 18.9087 14.8874 19 15.1173 19C15.3473 19 15.5678 18.9087 15.7304 18.7461C15.893 18.5835 15.9843 18.3629 15.9843 18.133V13.917C16.4834 13.7388 16.9152 13.4107 17.2206 12.9776C17.5259 12.5444 17.6898 12.0274 17.6898 11.4975C17.6898 10.9676 17.5259 10.4506 17.2206 10.0174C16.9152 9.58427 16.4834 9.25615 15.9843 9.078ZM15.1173 12.334C14.9518 12.334 14.7899 12.2849 14.6522 12.1929C14.5146 12.1009 14.4073 11.9701 14.344 11.8171C14.2806 11.6641 14.2641 11.4957 14.2965 11.3333C14.3289 11.171 14.4087 11.0218 14.5258 10.9048C14.643 10.7878 14.7922 10.7081 14.9547 10.676C15.1171 10.6438 15.2854 10.6605 15.4384 10.724C15.5913 10.7875 15.7219 10.8949 15.8138 11.0327C15.9056 11.1705 15.9545 11.3324 15.9543 11.498C15.9538 11.7197 15.8654 11.9322 15.7086 12.0889C15.5517 12.2456 15.3391 12.3337 15.1173 12.334V12.334Z" fill="#2B2F56"/>
+</svg>
diff --git a/akvo/rsr/spa/app/modules/program-overview/DisaggregationsBar.jsx b/akvo/rsr/spa/app/modules/program-overview/DisaggregationsBar.jsx
new file mode 100644
index 000000000..7b8b30b81
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/DisaggregationsBar.jsx
@@ -0,0 +1,58 @@
+/* eslint-disable no-restricted-globals */
+/* global document */
+import React, { useRef } from 'react'
+import { useTranslation } from 'react-i18next'
+import maxBy from 'lodash/maxBy'
+import { setNumberFormat } from '../../utils/misc'
+
+const DisaggregationsBar = ({ dsgItems, tooltipRef }) => {
+  const { t } = useTranslation()
+  const barRef = useRef(null)
+  const mouseEnterBar = (disagg, ev) => {
+    if (tooltipRef.current) {
+      tooltipRef.current.innerHTML = `<div><b>${disagg.type}</b><br />${setNumberFormat(disagg.total)}${(disagg.target > 0) ? t(' of {{target}}', { target: setNumberFormat(disagg.target) }) : ''}</div>`
+      tooltipRef.current.style.opacity = 1
+      const rect = ev.target.getBoundingClientRect()
+      const barRect = barRef.current.getBoundingClientRect()
+      const bodyRect = document.body.getBoundingClientRect()
+      tooltipRef.current.style.top = `${(barRect.top - bodyRect.top) + 50}px`
+      tooltipRef.current.style.left = `${rect.left + (rect.right - rect.left) / 2 - 2}px`
+    }
+  }
+  const mouseLeaveBar = () => {
+    tooltipRef.current.style.opacity = 0
+  }
+  return (
+    <div className="disaggregation-groups">
+      {dsgItems?.map((item, index) => {
+        const maxValue = maxBy(item.items, 'total')?.total
+        return (
+          <div className="stat" key={index}>
+            <div className="label">{item.name}</div>
+            <div className="disaggregations-bar" ref={(ref) => { barRef.current = ref }}>
+              {
+                item?.items?.map((it) => {
+                  const height = maxValue ? (it.total / maxValue) * 40 : 0
+                  const targetHeight = (maxValue && it.target) ? (it.target / maxValue) * 40 : 0
+                  return (
+                    <div
+                      key={it?.id}
+                      className="dsg-item"
+                      onMouseEnter={(ev) => mouseEnterBar(it, ev)}
+                      onMouseLeave={mouseLeaveBar}
+                    >
+                      <div className="color" style={{ height: isNaN(height) ? 0 : height }} />
+                      {(it.target !== null) && <div className="target color" style={{ height: isNaN(targetHeight) ? 0 : targetHeight }} />}
+                    </div>
+                  )
+                })
+              }
+            </div>
+          </div>
+        )
+      })}
+    </div>
+  )
+}
+
+export default DisaggregationsBar
diff --git a/akvo/rsr/spa/app/modules/program-overview/InitialView.jsx b/akvo/rsr/spa/app/modules/program-overview/InitialView.jsx
new file mode 100644
index 000000000..5c87a21aa
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/InitialView.jsx
@@ -0,0 +1,90 @@
+/* global */
+import React from 'react'
+import { Collapse, Icon, Spin } from 'antd'
+import { useTranslation } from 'react-i18next'
+import classNames from 'classnames'
+import moment from 'moment'
+
+import StickyClass from '../program/sticky-class'
+import ExpandIcon from '../program/ExpandIcon'
+import Highlighted from '../../components/Highlighted'
+
+const { Panel } = Collapse
+
+const InitialView = ({ results, search, targetsAt }) => {
+  const { t } = useTranslation()
+  const defaultActiveKey = results.slice(0, 1).map((_, ix) => `${ix}`)
+  return (
+    <Collapse
+      defaultActiveKey={defaultActiveKey}
+      bordered={false}
+      expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+    >
+      {results.map((result, rx) => (
+        <Panel
+          key={rx}
+          header={(
+            <StickyClass offset={20}>
+              <h1><Highlighted text={result.title} highlight={search} /></h1>
+              <div><i>{result.type}</i><span>{t('nindicators', { count: result.indicatorTitles.length })}</span></div>
+            </StickyClass>
+          )}
+        >
+          <Collapse
+            defaultActiveKey={['0']}
+            expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+          >
+            {result.indicatorTitles.map((title, tx) => (
+              <Panel
+                key={tx}
+                header={
+                  <StickyClass top={40}>
+                    <h3><Highlighted text={title} highlight={search} /></h3>
+                    <div><span className="type">{result.type}</span> <span className={classNames('periods', { 'color-periods': false })}>{t('nperiods', { count: result.periods.length })}</span></div>
+                  </StickyClass>}
+              >
+                <div className="indicator">
+                  <Collapse
+                    defaultActiveKey={
+                      targetsAt === 'indicator'
+                        ? Array.from({ length: result.periods.length }).map((_, key) => `${key}`)
+                        : ['0']
+                    }
+                    expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+                  >
+                    {
+                      result
+                        .periods
+                        .filter((p) => (p[0] && p[1]))
+                        .sort((a, b) => moment(b[0], 'DD/MM/YYYY').unix() - moment(a[0], 'DD/MM/YYYY').unix())
+                        .map((p, px) => {
+                          const { 0: periodStart, 1: periodEnd } = p
+                          return (
+                            <Panel
+                              key={px}
+                              header={(
+                                <div>
+                                  <h5 className={classNames({ 'color-periods': false })}>{moment(periodStart, 'YYYY-MM-DD').format('DD MMM YYYY')} - {moment(periodEnd, 'YYYY-MM-DD').format('DD MMM YYYY')}</h5>
+                                  <ul className="small-stats">
+                                    <li>Loading...</li>
+                                  </ul>
+                                </div>
+                              )}
+                            >
+                              <div className="loading-container"><Spin indicator={<Icon type="loading" style={{ fontSize: 32 }} spin />} /></div>
+                            </Panel>
+                          )
+                        })
+                    }
+                  </Collapse>
+                </div>
+              </Panel>
+            ))}
+          </Collapse>
+        </Panel>
+      ))}
+    </Collapse>
+  )
+}
+
+export default InitialView
diff --git a/akvo/rsr/spa/app/modules/program-overview/Program.jsx b/akvo/rsr/spa/app/modules/program-overview/Program.jsx
new file mode 100644
index 000000000..61564d4c7
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/Program.jsx
@@ -0,0 +1,325 @@
+import React, { useState, useEffect } from 'react'
+import {
+  Icon,
+  Spin,
+  Collapse,
+  Typography,
+  Badge,
+  Row,
+  Col,
+  Button,
+  Popover,
+  List,
+  Card,
+  Empty
+} from 'antd'
+import { Redirect } from 'react-router-dom'
+import useSWR from 'swr'
+import { sum, uniq } from 'lodash'
+import moment from 'moment'
+import classNames from 'classnames'
+import { connect } from 'react-redux'
+
+import api from '../../utils/api'
+import countriesDict from '../../utils/countries-dict'
+import InitialView from './InitialView'
+import ProgramView from './ProgramView'
+import Filter from '../../components/filter'
+import { handleOnCountFiltering, handleOnFiltering } from './query'
+import { setNumberFormat } from '../../utils/misc'
+import * as actions from './actions'
+import * as filterActions from '../../store/filter/actions'
+import { getStatusFiltering } from './filters'
+
+const { Panel } = Collapse
+const { Text, Title } = Typography
+
+const PanelHeader = ({ count, text }) => (
+  <div className="header-panel-filter">
+    <div>
+      <Text strong>{text}</Text>
+    </div>
+    <div>
+      <Badge count={count} className="badge-filter" />
+    </div>
+  </div>
+)
+
+const Program = ({
+  loading,
+  initial,
+  params,
+  programRdr,
+  filterRdr: filtering,
+  ...actionProps
+}) => {
+  const {
+    appendResults,
+    applyFilter,
+    setFilterItems,
+    removeFilterItem,
+    clearFilter,
+  } = actionProps
+
+  const [countryOpts, setCountryOpts] = useState([])
+  const [contributors, setContributors] = useState([])
+  const [periods, setPeriods] = useState([])
+  const [partners, setPartners] = useState([])
+  const [toggle, setToggle] = useState(false)
+  const [preload, setPreload] = useState(true)
+  const [search, setSearch] = useState(null)
+  const { data: apiData, error: apiError } = useSWR(`/program/${params.projectId}/results/?format=json`, url => api.get(url).then(res => res.data))
+  const { data: datStatus, error: errStatus } = useSWR(`/title-and-status/${params.projectId}/?format=json`, url => api.get(url).then(res => res.data))
+  const { results: dataResults, id: dataId } = apiData || {}
+  const { targetsAt } = datStatus || {}
+  const itemPeriods = periods?.map((p, px) => ({ id: px, value: p }))
+  const countries = countryOpts?.map((c) => ({ id: c, value: countriesDict[c] }))
+
+  const handleOnUnique = (data, field) => {
+    const ds = data
+      ?.map((d) => (
+        Object.keys(d[field]).map((r) => ({
+          id: parseInt(r, 10),
+          value: d[field][r]
+        }))
+      ))
+      ?.flatMap((d) => d)
+    return uniq(data.flatMap((r) => Object.keys(r[field])))
+      ?.map((k) => ds.find((d) => d.id === parseInt(k, 10)))
+      ?.sort((a, b) => a?.value?.localeCompare(b?.value))
+      ?.filter((v) => v)
+  }
+  const handleOnApply = (fieldName) => {
+    applyFilter({ fieldName })
+    setToggle(false)
+  }
+  const handleOnSetItems = (fieldName, items = []) => {
+    const fields = { countries, partners, contributors, periods: itemPeriods }
+    const data = items.map(it => Object.values(fields[fieldName]).find((d) => d.id === it))
+    setFilterItems({ fieldName, data })
+  }
+  const handleOnClear = () => {
+    if (search) {
+      setSearch(null)
+    }
+    clearFilter()
+  }
+  const handleOnCloseTag = (fieldName, id) => {
+    removeFilterItem({ fieldName, id })
+  }
+  const { allFilters } = getStatusFiltering(filtering)
+  const resultItems = handleOnFiltering(programRdr, filtering, search)
+  const totalItems = sum(allFilters.map((v) => v.items.length))
+  const totalMatches = handleOnCountFiltering(resultItems, filtering, search)
+
+  useEffect(() => {
+    if (preload) {
+      /**
+       * run only once
+       */
+      setPreload(false)
+      clearFilter()
+    }
+    if (initial && !countryOpts.length && !contributors.length && !partners.length && !periods.length) {
+      const opts = []
+      initial.forEach(result => {
+        result.countries.forEach(opt => { if (opts.indexOf(opt) === -1) opts.push(opt) })
+      })
+      setCountryOpts(opts)
+      setContributors(handleOnUnique(initial, 'contributors'))
+      setPartners(handleOnUnique(initial, 'partners'))
+      const pds = uniq(initial
+        ?.flatMap((r) => r.periods)
+        ?.filter((p) => (p[0] && p[1]))
+        ?.map((p) => `${moment(p[0], 'YYYY-MM-DD').format('DD/MM/YYYY')} - ${moment(p[1], 'YYYY-MM-DD').format('DD/MM/YYYY')}`))
+        ?.sort((a, b) => {
+          const xb = b.split(' - ')
+          const xa = a.split(' - ')
+          return moment(xa[1], 'DD/MM/YYYY').format('YYYY') - moment(xb[1], 'DD/MM/YYYY').format('YYYY')
+        })
+      setPeriods(pds)
+    }
+    if (totalItems === 0 && allFilters.length) {
+      handleOnClear()
+    }
+
+    const originContributorsLength = dataResults
+      ?.flatMap((r) => r?.indicators)
+      ?.flatMap((i) => i?.periods)
+      ?.flatMap((p) => p?.contributors)
+      ?.length
+    const currentContribtorsLength = programRdr
+      ?.flatMap((r) => r?.indicators)
+      ?.flatMap((i) => i?.periods)
+      ?.flatMap((p) => p?.contributors)
+      ?.length
+
+    if ((dataResults && (dataResults.length !== programRdr.length)) || (apiData && (totalItems === 0 && (originContributorsLength !== currentContribtorsLength)))) {
+      appendResults(dataResults)
+    }
+  }, [
+    initial,
+    programRdr,
+    filtering,
+    params,
+    preload,
+    dataResults,
+    countryOpts,
+    contributors,
+    periods,
+    partners
+  ])
+  return (
+    <>
+      <div id="program-filter-bar">
+        <Filter className="ui container">
+          <Filter.Input
+            placeholder="Search title"
+            visible={toggle}
+            loading={loading}
+            count={totalItems}
+            onPopOver={() => setToggle(!toggle)}
+            value={search}
+            onChange={e => setSearch(e.target.value)}
+          />
+          {((allFilters.length > 0) || search) && (
+            <div className="filter-selected-bar flex-between">
+              <div className="filter-selected-bar">
+                <div className="bar-column">
+                  <div className="info">
+                    <h2>{setNumberFormat(totalMatches)}</h2>
+                    <Text strong>Matches</Text>
+                  </div>
+                </div>
+                {Object.values(filtering)
+                  .filter(({ apply, items }) => (apply && items.length))
+                  .map(({ items, key }, ix) => {
+                    const firstItems = items?.slice(0, 5)
+                    const leftItems = items?.slice(5)
+                    return (
+                      <div className="bar-column" key={ix}>
+                        <Row>
+                          <Col>
+                            <strong>{key?.toUpperCase()}</strong>
+                          </Col>
+                        </Row>
+                        <Row type="flex" align="middle" justify="start">
+                          <Col>
+                            {firstItems?.map(item => (
+                              <Filter.Tag className={`color-${key}`} key={item.id} onClose={() => handleOnCloseTag(key, item.id)}>
+                                {item.value}
+                              </Filter.Tag>
+                            ))}
+                            {(leftItems?.length > 0) && (
+                              <Popover
+                                trigger="click"
+                                title={key?.toUpperCase()}
+                                overlayClassName="filter-more"
+                                content={(
+                                  <List
+                                    dataSource={leftItems}
+                                    className="filter-more-items"
+                                    renderItem={item => (
+                                      <List.Item>
+                                        <Row type="flex" justify="space-between" align="middle" className="filter-more-item">
+                                          <Col lg={20} className="value">{item.value}</Col>
+                                          <Col lg={4}>
+                                            <Button type="link" onClick={() => handleOnCloseTag(key, item.id)}>
+                                              <Icon type="close" />
+                                            </Button>
+                                          </Col>
+                                        </Row>
+                                      </List.Item>
+                                    )}
+                                  />
+                                )}
+                                placement="bottom"
+                              >
+                                <Button shape="circle" className={`color-${key}`}>{leftItems.length > 99 ? '99+' : `+${leftItems.length}`}</Button>
+                              </Popover>
+                            )}
+                          </Col>
+                        </Row>
+                      </div>
+                    )
+                  })}
+              </div>
+              <div className="bar-column">
+                <Button type="link" icon="close-circle" onClick={handleOnClear}>Clear all</Button>
+              </div>
+            </div>
+          )}
+        </Filter>
+        <Card className={classNames('rsr-card-filter-container', { show: toggle })}>
+          <Row gutter={[8, 8]} className="header-filter">
+            <Col span={16} className="title-filter">
+              <Text strong>Applied Filter Results</Text>
+            </Col>
+            <Col span={8} className="total-filter">
+              <Title level={4}>{totalItems}</Title>
+              <Button type="link" onClick={handleOnClear}><Icon type="close-circle" /></Button>
+            </Col>
+          </Row>
+          <Row gutter={[8, 8]}>
+            <Col span={24} className="collapse-filter">
+              <Collapse accordion bordered={false} expandIconPosition="right">
+                <Panel header={<PanelHeader count={filtering.countries.items.length} text="Location" />} key="1">
+                  <Filter.Items
+                    data={countries}
+                    picked={filtering.countries.items}
+                    title="Select project Location(s)"
+                    onApply={() => handleOnApply('countries')}
+                    onSetItems={(items) => handleOnSetItems('countries', items)}
+                    isGrouped
+                  />
+                </Panel>
+                <Panel header={<PanelHeader count={filtering.periods.items.length} text="Reporting Period" />} key="2">
+                  <Filter.Items
+                    data={itemPeriods}
+                    picked={filtering.periods.items}
+                    title="Select project period(s)"
+                    onApply={() => handleOnApply('periods')}
+                    onSetItems={(items) => handleOnSetItems('periods', items)}
+                  />
+                </Panel>
+                <Panel header={<PanelHeader count={filtering.contributors.items.length} text="Contribution Projects" />} key="3">
+                  <Filter.Items
+                    data={contributors}
+                    picked={filtering.contributors.items}
+                    title="Select contributing project(s)"
+                    onApply={() => handleOnApply('contributors')}
+                    onSetItems={(items) => handleOnSetItems('contributors', items)}
+                    isGrouped
+                  />
+                </Panel>
+                <Panel header={<PanelHeader count={filtering.partners.items.length} text="Partners" />} key="4">
+                  <Filter.Items
+                    data={partners}
+                    picked={filtering.partners.items}
+                    title="Select partner(s)"
+                    onApply={() => handleOnApply('partners')}
+                    onSetItems={(items) => handleOnSetItems('partners', items)}
+                    isGrouped
+                  />
+                </Panel>
+              </Collapse>
+            </Col>
+          </Row>
+        </Card>
+      </div>
+      <div className="ui container">
+        <div className="program-view">
+          {(apiError || errStatus || (dataResults && dataResults.length === 0)) && <Redirect to={`/programs/${params.projectId}/editor`} />}
+          {(!initial && loading) && <div className="loading-container"><Spin indicator={<Icon type="loading" style={{ fontSize: 40 }} spin />} /></div>}
+          {(initial && !apiData) && <InitialView results={initial} {...{ filtering, search, targetsAt }} />}
+          {((initial && apiData) && resultItems.length > 0) && <ProgramView {...{ dataId, filtering, resultItems, search, targetsAt }} />}
+          {((initial && apiData) && resultItems.length === 0) && <Empty description="No results found" className="mt-30" />}
+        </div>
+      </div>
+    </>
+  )
+}
+
+export default connect(
+  ({ programRdr, filterRdr }) => ({ programRdr, filterRdr }), { ...actions, ...filterActions }
+)(Program)
diff --git a/akvo/rsr/spa/app/modules/program-overview/ProgramContributor.jsx b/akvo/rsr/spa/app/modules/program-overview/ProgramContributor.jsx
new file mode 100644
index 000000000..873621cef
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/ProgramContributor.jsx
@@ -0,0 +1,223 @@
+/* eslint-disable no-restricted-globals */
+import React, { useEffect, useState } from 'react'
+import { Collapse, Empty, Icon } from 'antd'
+import { useTranslation } from 'react-i18next'
+import { groupBy, sumBy } from 'lodash'
+import classNames from 'classnames'
+import moment from 'moment'
+import { connect } from 'react-redux'
+
+import { setNumberFormat } from '../../utils/misc'
+import countriesDict from '../../utils/countries-dict'
+import ExpandIcon from '../program/ExpandIcon'
+import api from '../../utils/api'
+import ApprovedUpdates from '../program/ApprovedUpdates'
+import ValueComments from './ValueComments'
+import ProjectSummary from '../program/ProjectSummary'
+import { findCountries, findPartners, findProjects, getStatusFiltering } from './filters'
+import * as actions from './actions'
+import { getAllCountries } from './query'
+
+const { Panel } = Collapse
+
+const ProgramContributor = ({
+  id: periodID,
+  dataId,
+  pinned,
+  type,
+  fetched,
+  updates,
+  openedItem,
+  filtering,
+  contributors,
+  actualValue,
+  scoreOptions,
+  setContributors,
+  onChange
+}) => {
+  const { t } = useTranslation()
+  const [preload, setPreload] = useState(true)
+  const [fetching, setFetching] = useState(true)
+  const [contribKey, setContribKey] = useState(['0'])
+
+  const { hasContrib, hasPartner, hasCountry } = getStatusFiltering(filtering)
+
+  useEffect(() => {
+    if (preload && fetched === undefined) {
+      setPreload(false)
+      const ids = [
+        ...contributors?.map((cb) => cb.id),
+        ...contributors?.flatMap((cb) => cb?.contributors)?.map((cb) => cb.id)
+      ].join(',')
+      api
+        .get(`/program/${dataId}/indicator_updates_by_period_id/?format=json&ids=${ids}`)
+        .then(res => {
+          const groupUpdates = groupBy(res.data, 'period')
+          const updateItems = Object.keys(groupUpdates)?.map((_key) => {
+            const item = contributors?.flatMap((cb) => [cb, ...cb?.contributors])?.find((c) => `${c.id}` === _key) || {}
+            const total = type === 'quantitative' ? sumBy(groupUpdates[_key], 'value') : 0
+            return {
+              ...item,
+              updates: groupUpdates[_key],
+              total
+            }
+          })
+          const projects = contributors?.map((cb) => {
+            const findUpdate = updateItems.find((u) => u?.id === cb.id) || {}
+            if (cb?.contributors?.length && Object.keys(findUpdate).length === 0) {
+              const childs = cb.contributors.map((it) => {
+                const findChild = updateItems.find((u) => u?.id === it.id) || {}
+                return ({
+                  ...it,
+                  updates: findChild?.updates || [],
+                  total: parseInt(findChild?.total || 0, 10)
+                })
+              })
+              const grandTotal = sumBy(childs, 'total')
+              return ({
+                ...cb,
+                contributors: childs,
+                total: grandTotal,
+                updates: []
+              })
+            }
+            return ({
+              ...cb,
+              updates: findUpdate?.updates || [],
+              total: findUpdate?.total || 0
+            })
+          })
+          setContributors({ periodID, data: projects })
+          setFetching(false)
+        })
+        .catch(() => {
+          setFetching(false)
+        })
+    }
+    if (fetched === undefined && !preload && !fetching) {
+      setFetching(true)
+      setPreload(true)
+    }
+  }, [updates, fetched, fetching, preload])
+
+  return contributors.length
+    ? (
+      <Collapse
+        onChange={(values) => {
+          setContribKey(values)
+          onChange(values)
+        }}
+        activeKey={contribKey}
+        className="contributors-list"
+        expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+        accordion
+      >
+        {contributors?.sort((a, b) => b.total - a.total)?.map((cb, _index) => {
+          const totalParentValues = sumBy(cb.updates, 'value')
+          const subCountries = getAllCountries(cb?.contributors, filtering)
+          const homeSelected = findCountries(filtering, cb)
+          const homeClass = (hasCountry && (homeSelected || !contribKey))
+          const homeCountry = ((hasCountry && (contribKey || (subCountries.length === 0 && cb.country))) || (!hasCountry && cb.country))
+            ? ` ${countriesDict[cb.country.isoCode]}`
+            : subCountries?.length === 1
+              ? ` ${subCountries.pop()}`
+              : subCountries.length === 0 ? null : ` ${subCountries.length} ${t('country_s', { count: subCountries.length })}`
+          const activePartner = findPartners(filtering, cb)
+          const activeContributor = findProjects(filtering, cb)
+          return (
+            <Panel
+              key={_index}
+              className={classNames(type, { pinned: pinned === _index })}
+              header={(
+                <>
+                  <div className="title">
+                    <h4 className={classNames({ 'color-contributors': activeContributor })}>{cb.projectTitle}</h4>
+                    <p>
+                      {cb.projectSubtitle && <span className={classNames({ 'color-partners': activePartner })}>{cb.projectSubtitle}</span>}
+                      {homeCountry && (
+                        <span className={classNames({ 'color-countries': homeClass })}>
+                          <Icon type="environment" />
+                          {homeCountry}
+                        </span>
+                      )}
+                      &nbsp;
+                      {cb?.contributors?.length > 0 && <b>{t('nsubcontributors', { count: cb.contributors.length })}</b>}
+                      <b>&nbsp;</b>
+                    </p>
+                  </div>
+                  {fetched && (
+                    <ProjectSummary
+                      indicatorType={type}
+                      aggFilteredTotal={actualValue}
+                      actualValue={cb.total}
+                      updatesValue={totalParentValues}
+                      {...{ ...cb, openedItem, scoreOptions, _index }}
+                    />
+                  )}
+                </>
+              )}
+            >
+              {(type === 'qualitative' && scoreOptions == null) && <ApprovedUpdates items={cb.updates} />}
+              <ul className="sub-contributors">
+                {cb?.contributors?.map(subproject => (
+                  <li key={subproject.id}>
+                    <div style={{ maxWidth: '95%' }}>
+                      <h5 className={classNames({ 'color-contributors': (hasContrib) })}>{subproject.projectTitle}</h5>
+                      <p>
+                        {subproject.projectSubtitle && <span className={classNames({ 'color-partners': hasPartner })}>{subproject.projectSubtitle}</span>}
+                        <span className={classNames({ 'color-countries': hasCountry })}>
+                          {(subproject.country) && (
+                            <>
+                              <Icon type="environment" />
+                              {` ${countriesDict[subproject.country.isoCode]}`}
+                            </>
+                          )}
+                        </span>
+                      </p>
+                    </div>
+                    <div className={classNames('value', `score-${subproject.scoreIndex ? subproject.scoreIndex + 1 : 1}`, { score: type === 'qualitative' && scoreOptions != null })}>
+                      {type === 'quantitative' && (
+                        <>
+                          <b>{setNumberFormat(subproject.total)}</b>
+                          <small>{cb.total ? Math.round((subproject.total / cb.total) * 100 * 10) / 10 : 0}%</small>
+                        </>
+                      )}
+                      {(type === 'qualitative' && scoreOptions != null) && (
+                        <div className="score-box">Score {subproject.scoreIndex || 0 + 1}</div>
+                      )}
+                      {subproject?.updates?.length > 0 &&
+                        <div className="updates-popup">
+                          <header>{subproject.updates.length} approved updates</header>
+                          <ul>
+                            {subproject.updates.map(update => (
+                              <li key={update.id}>
+                                <span>{moment(update.createdAt).format('DD MMM YYYY')}</span>
+                                <span>{`${update?.userDetails?.firstName} ${update?.userDetails?.lastName}`}</span>
+                                {update.value && <b>{setNumberFormat(update.value)}</b>}
+                                {update.scoreIndex != null && <b><small>Score {update.scoreIndex ? update.scoreIndex + 1 : 1}</small></b>}
+                              </li>
+                            ))}
+                          </ul>
+                        </div>
+                      }
+                    </div>
+                    {(type === 'qualitative' && scoreOptions == null) && <ApprovedUpdates items={subproject.updates} />}
+                  </li>
+                ))}
+              </ul>
+              {(type === 'quantitative' || scoreOptions != null) && <ValueComments items={cb.updates} />}
+            </Panel>
+          )
+        })}
+      </Collapse>
+    )
+    : (
+      <>
+        {(fetching && fetched === undefined) ? 'Loading...' : <Empty />}
+      </>
+    )
+}
+
+export default connect(
+  ({ programRdr }) => ({ programRdr }), actions
+)(ProgramContributor)
diff --git a/akvo/rsr/spa/app/modules/program-overview/ProgramOverview.jsx b/akvo/rsr/spa/app/modules/program-overview/ProgramOverview.jsx
new file mode 100644
index 000000000..00fcdecff
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/ProgramOverview.jsx
@@ -0,0 +1,88 @@
+/* global document */
+import React, { useState, useEffect } from 'react'
+import { connect } from 'react-redux'
+import { Route, Link, useRouteMatch, useLocation } from 'react-router-dom'
+import { Tabs } from 'antd'
+import { useTranslation } from 'react-i18next'
+import classNames from 'classnames'
+import useSWR from 'swr'
+
+import './styles.scss'
+import Hierarchy from '../hierarchy/hierarchy'
+import Editor from '../editor/editor'
+import Reports from '../reports/reports'
+import * as actions from '../editor/actions'
+import api from '../../utils/api'
+import Program from './Program'
+
+const { TabPane } = Tabs
+
+const ProgramOverview = ({ userRdr }) => {
+  const { t } = useTranslation()
+  const [loading, setLoading] = useState(true)
+  const { path, url, params: rootParams } = useRouteMatch()
+  const location = useLocation()
+  const currentView = location?.pathname?.split('/')
+
+  const { data: apiData, error: apiError } = useSWR(`/project/${rootParams.projectId}/results`, url => api.get(url).then(res => res.data))
+  const { results, title } = apiData || {}
+  const canEdit = userRdr.programs && userRdr.programs.find(program => program.id === parseInt(rootParams.projectId, 10))?.canEditProgram
+
+  useEffect(() => {
+    if (loading && (title || apiError)) {
+      document.title = `${title} | Akvo RSR`
+      setLoading(false)
+    }
+  }, [title, loading])
+
+  return (
+    <div className="program-view">
+      <div className="ui container">
+        <header className={classNames('main-header', { editor: rootParams.view === 'editor' })}>
+          <h1>{title || t('Untitled program')}</h1>
+        </header>
+        <Tabs size="large" activeKey={currentView[3] || 'overview'}>
+          {(results && results.length > 0) && <TabPane tab={<Link to={`/programs/${rootParams.projectId}`}>Overview</Link>} key="overview" />}
+          {canEdit && <TabPane tab={<Link to={`/programs/${rootParams.projectId}/editor`}>Editor</Link>} key="editor" />}
+          <TabPane tab={<Link to={`${url}/hierarchy`}>Hierarchy</Link>} key="hierarchy" />
+          <TabPane tab={<Link to={`${url}/reports`}>Reports</Link>} key="reports" />
+        </Tabs>
+      </div>
+      <Route
+        exact
+        path={path}
+        render={() => (
+          <Program
+            initial={results}
+            params={rootParams}
+            loading={loading}
+          />
+        )}
+      />
+      <Route path={`${path}/hierarchy`} render={(_props) =>
+        <div className="ui container mt-30">
+          <Hierarchy {..._props} canEdit={canEdit} program />
+        </div>
+      }
+      />
+      <Route path={`${path}/reports`} render={() =>
+        <div className="ui container mt-30">
+          <Reports programId={rootParams.projectId} />
+        </div>
+      }
+      />
+      <Route path="/programs/:id/editor" render={({ match: { params } }) =>
+        <div className="ui container">
+          <Editor {...{ params }} program />
+        </div>
+      }
+      />
+      <div id="bar-tooltip" />
+      <div id="disagg-bar-tooltip" />
+    </div>
+  )
+}
+
+export default connect(
+  ({ editorRdr: { section1: { fields: { title } } }, userRdr }) => ({ title, userRdr }), actions
+)(ProgramOverview)
diff --git a/akvo/rsr/spa/app/modules/program-overview/ProgramView.jsx b/akvo/rsr/spa/app/modules/program-overview/ProgramView.jsx
new file mode 100644
index 000000000..80fef7d5b
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/ProgramView.jsx
@@ -0,0 +1,287 @@
+/* eslint-disable no-restricted-globals */
+/* global window, document */
+import React, { useEffect, useState, useRef } from 'react'
+import { Collapse, Row, Col, Spin, Icon } from 'antd'
+import { useTranslation } from 'react-i18next'
+import moment from 'moment'
+import classNames from 'classnames'
+import { connect } from 'react-redux'
+
+import StickyClass from '../program/sticky-class'
+import ExpandIcon from '../program/ExpandIcon'
+import Highlighted from '../../components/Highlighted'
+import { sizes } from '../program/config'
+import { setNumberFormat } from '../../utils/misc'
+import TargetCharts from '../../utils/target-charts'
+import ProgramContributor from './ProgramContributor'
+import DisaggregationsBar from './DisaggregationsBar'
+import { getStatusFiltering } from './filters'
+
+const { Panel } = Collapse
+
+const ProgramView = ({
+  dataId,
+  targetsAt,
+  search,
+  filtering,
+  resultItems,
+}) => {
+  const { t } = useTranslation()
+  const [pinned, setPinned] = useState(-1)
+  const [openedItem, setOpenedItem] = useState(null)
+  const [indicatorKeys, setIndicatorKeys] = useState(['0'])
+  const listRef = useRef(null)
+  const pinnedRef = useRef(-1)
+  const tooltipRef = useRef(null)
+  const disaggTooltipRef = useRef(null)
+  let scrollingTransition
+  let tmid
+  const { hasPeriod, hasCountry, hasContrib, allFilters } = getStatusFiltering(filtering)
+  const hasAnyFilters = (allFilters.length > 0)
+
+  const _setPinned = (to) => {
+    setPinned(to)
+    pinnedRef.current = to
+  }
+
+  const handleAccordionChange = (index) => {
+    setOpenedItem(index)
+    _setPinned(Number(index))
+    if (index != null) {
+      // const offset = 63 + (index * 75) + listRef.current.children[0].children[index].offsetParent.offsetTop
+      clearTimeout(tmid)
+      scrollingTransition = true
+      // window.scroll({ top: offset - sizes.stickyHeader.height, behavior: 'smooth' })
+      tmid = setTimeout(() => {
+        scrollingTransition = false
+      }, 1000)
+    }
+  }
+
+  const handleScroll = () => {
+    if (pinnedRef.current !== -1 && !scrollingTransition && listRef.current.children[0].children[pinnedRef.current]) {
+      const diff = (window.scrollY + sizes.stickyHeader.height) - (listRef.current.children[0].children[pinnedRef.current].offsetParent.offsetTop + 63 + (pinnedRef.current * 75))
+      if (diff < -20 || diff > listRef.current.children[0].children[pinnedRef.current].clientHeight) {
+        _setPinned(-1)
+      }
+    }
+  }
+
+  const mouseEnterBar = (index, value, ev) => {
+    if (pinned === index || !listRef.current) return
+    if (listRef.current.children[0].children[index]) {
+      listRef.current.children[0].children[index].classList.add('active')
+    }
+    if (tooltipRef.current) {
+      tooltipRef.current.innerHTML = `<div>${value}</div>`
+      tooltipRef.current.style.opacity = 1
+      const rect = ev.target.getBoundingClientRect()
+      const bodyRect = document.body.getBoundingClientRect()
+      tooltipRef.current.style.top = `${(rect.top - bodyRect.top) - 40}px`
+      tooltipRef.current.style.left = `${rect.left + (rect.right - rect.left) / 2}px`
+    }
+  }
+
+  const mouseLeaveBar = (index) => {
+    if (!listRef.current) return
+    if (listRef.current.children[0].children[index]) {
+      listRef.current.children[0].children[index].classList.remove('active')
+    }
+    tooltipRef.current.style.opacity = 0
+  }
+
+  const clickBar = (index, e) => {
+    e.stopPropagation()
+    if (listRef.current.children[0].children[index]) {
+      if (listRef.current.children[0].children[index].classList.contains('ant-collapse-item-active') === false) {
+        listRef.current.children[0].children[index].children[0].click()
+      }
+    }
+  }
+
+  useEffect(() => {
+    tooltipRef.current = document.getElementById('bar-tooltip')
+    disaggTooltipRef.current = document.getElementById('disagg-bar-tooltip')
+    document.addEventListener('scroll', handleScroll)
+    return () => document.removeEventListener('scroll', handleScroll)
+  }, [])
+
+  return (
+    <Collapse
+      bordered={false}
+      defaultActiveKey={['0']}
+      expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+    >
+      {resultItems.map((result, rx) => (
+        <Panel
+          key={rx}
+          header={(
+            <StickyClass offset={20}>
+              <h1><Highlighted text={result.title} highlight={search} /></h1>
+              <div><i>{result.type}</i><span>{t('nindicators', { count: result.indicators.length })}</span></div>
+            </StickyClass>
+          )}
+        >
+          <Collapse
+            activeKey={indicatorKeys}
+            onChange={setIndicatorKeys}
+            expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+          >
+            {result.indicators.map((i, index) => {
+              const pKeys = i?.periods.map((_, px) => `${px}`)
+              const defaultPeriodKey = (targetsAt === 'indicator') ? pKeys : []
+              const hasAChart = (
+                (targetsAt && targetsAt === 'indicator') && (i?.targetValue) &&
+                (indicatorKeys.includes(`${index}`))
+              )
+              const colTitle = hasAChart
+                ? { xl: 18, lg: 14, md: 12, sm: 24, xs: 24 }
+                : { span: 24 }
+              return (
+                <Panel
+                  key={index}
+                  className={classNames({ hasAnyFilters })}
+                  header={(
+                    <StickyClass top={40}>
+                      <Row gutter={[8, { sm: 32, xs: 32 }]}>
+                        <Col {...colTitle}>
+                          <h3><Highlighted text={i.title} highlight={search} /></h3>
+                          <div>
+                            <span className="type">{i.type}</span>
+                            <span className={classNames('periods', { 'color-periods': (hasPeriod) })}>{t('nperiods', { count: i.periods.length })}</span>
+                          </div>
+                        </Col>
+                        {(hasAChart) && (
+                          <Col xl={6} lg={10} md={12} sm={24} xs={24}>
+                            <Row type="flex" justify="end">
+                              <Col span={10} className="stats-indicator text-right">
+                                <div className="stat value">
+                                  <div className="label">Aggregate Actual</div>
+                                  <b>{setNumberFormat(i.sumActualValue || 0)}</b><br />
+                                  <span>
+                                    of <b>{setNumberFormat(i?.targetValue)}</b> target
+                                  </span>
+                                </div>
+                              </Col>
+                              <Col span={14}>
+                                <TargetCharts targetValue={i?.targetValue} actualValue={i.sumActualValue} />
+                              </Col>
+                            </Row>
+                          </Col>
+                        )}
+                      </Row>
+                    </StickyClass>
+                  )}
+                >
+                  <div className="indicator">
+                    <Collapse
+                      defaultActiveKey={defaultPeriodKey}
+                      expandIcon={({ isActive }) => <ExpandIcon isActive={isActive} />}
+                    >
+                      {i?.periods?.map((p, px) => (
+                        <Panel
+                          key={px}
+                          className={classNames(i.type, {
+                            single: p.single,
+                            emptyBar: !p?.actualValue,
+                            hasAChart,
+                            hasAnyFilters
+                          })}
+                          header={(
+                            <>
+                              <div>
+                                <h5 className={classNames({ 'color-periods': (hasPeriod) })}>
+                                  {moment(p.periodStart, 'DD/MM/YYYY').format('DD MMM YYYY')} - {moment(p.periodEnd, 'DD/MM/YYYY').format('DD MMM YYYY')}
+                                </h5>
+                                <ul className="small-stats">
+                                  {((p?.contributors?.length > 0 && !hasAnyFilters) || (hasAnyFilters && p?.contributors?.flatMap((c) => c?.contributors)?.length === 0)) && (
+                                    <li className={classNames({ 'color-contributors': (hasContrib) })}>
+                                      <b className={classNames({ 'color-contributors': (hasContrib) })}>
+                                        {p?.contributors?.length}
+                                      </b>{' '}
+                                      {t('contributor_s', { count: p?.contributors?.length })}
+                                    </li>
+                                  )}
+                                  {(p.countries.length > 1) && (
+                                    <li className={classNames({ 'color-countries': (hasCountry) })}>
+                                      <b className={classNames({ 'color-countries': (hasCountry) })}>
+                                        {p.countries.length}
+                                      </b>
+                                      {` ${t('country_s', { count: p.countries.length })}`}
+                                    </li>
+                                  )}
+                                </ul>
+                              </div>
+                              {
+                                (
+                                  (i.type === 'quantitative' && p?.fetched) ||
+                                  (hasAnyFilters && p.actualValue > 0)
+                                ) && (
+                                  <>
+                                    <div className={classNames('stats', { extended: p?.targetValue > 0 })}>
+                                      {/* start dsg */}
+                                      {(p.disaggregations.length > 0) && <DisaggregationsBar dsgItems={p.dsgItems} tooltipRef={disaggTooltipRef} />}
+                                      {/* end dsg */}
+                                      <div className="stat value">
+                                        <div className="label">aggregated actual</div>
+                                        <b>{setNumberFormat(p.actualValue)}</b>
+                                        {targetsAt && targetsAt === 'period' && p?.targetValue > 0 && (
+                                          <span>
+                                            of <b>{setNumberFormat(p?.targetValue)}</b> target
+                                          </span>
+                                        )}
+                                      </div>
+                                      {targetsAt && targetsAt === 'period' && p?.targetValue > 0 && <TargetCharts actualValue={p.actualValue} targetValue={p?.targetValue} />}
+                                    </div>
+                                    <ul className={classNames('bar', { 'contains-pinned': pinned !== -1 })}>
+                                      {p.contributors.sort((a, b) => b.total - a.total).map((it, _index) =>
+                                        <li
+                                          key={_index}
+                                          className={classNames({ pinned: pinned === _index })}
+                                          style={{ flex: it.total }}
+                                          onClick={(e) => clickBar(_index, e)}
+                                          onMouseEnter={(e) => mouseEnterBar(_index, setNumberFormat(it.total), e)}
+                                          onMouseLeave={(e) => mouseLeaveBar(_index, it.total, e)}
+                                        />
+                                      )}
+                                    </ul>
+                                  </>
+                                )
+                              }
+                            </>
+                          )}
+                        >
+                          <Spin spinning={(p.fetched === undefined)} indicator={<Icon type="loading" style={{ fontSize: 36 }} />}>
+                            <div ref={ref => { listRef.current = ref }}>
+                              <ProgramContributor
+                                type={i.type}
+                                scoreOptions={i.scoreOptions}
+                                actualValue={p.actualValue}
+                                onChange={handleAccordionChange}
+                                {...p}
+                                {...{
+                                  dataId,
+                                  pinned,
+                                  openedItem,
+                                  filtering,
+                                }}
+                              />
+                            </div>
+                          </Spin>
+                        </Panel>
+                      ))}
+                    </Collapse>
+                  </div>
+                </Panel>
+              )
+            })}
+          </Collapse>
+        </Panel>
+      ))}
+    </Collapse>
+  )
+}
+
+export default connect(
+  ({ programRdr }) => ({ programRdr })
+)(ProgramView)
diff --git a/akvo/rsr/spa/app/modules/program-overview/ValueComments.jsx b/akvo/rsr/spa/app/modules/program-overview/ValueComments.jsx
new file mode 100644
index 000000000..c435bf457
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/ValueComments.jsx
@@ -0,0 +1,22 @@
+/* eslint-disable react/no-danger */
+import React from 'react'
+import ShowMoreText from 'react-show-more-text'
+import moment from 'moment'
+
+const ValueComments = ({ items }) => (
+  <div className="comments">
+    <ul>
+      {items?.map((item, key) =>
+        <li key={key}>
+          <b>{`${item?.userDetails?.firstName} ${item?.userDetails?.lastName}`}</b>
+          <span className="date">{moment(item.createdAt).format('HH:mm, DD MMM YYYY')}</span>
+          <ShowMoreText lines={7}>
+            <p dangerouslySetInnerHTML={{ __html: item.narrative.replace(/\n/g, '<br />') }} />
+          </ShowMoreText>
+        </li>
+      )}
+    </ul>
+  </div>
+)
+
+export default ValueComments
diff --git a/akvo/rsr/spa/app/modules/program-overview/action-types.js b/akvo/rsr/spa/app/modules/program-overview/action-types.js
new file mode 100644
index 000000000..f4d4ab751
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/action-types.js
@@ -0,0 +1,5 @@
+export default {
+  APPEND_RESULTS: 'PRG_APPEND_RESULTS',
+  SET_CONTRIBUTORS: 'PRG_SET_CONTRIBUTORS',
+  APPLY_FILTER: 'PRG_APPLY_FILTER',
+}
diff --git a/akvo/rsr/spa/app/modules/program-overview/actions.js b/akvo/rsr/spa/app/modules/program-overview/actions.js
new file mode 100644
index 000000000..c42d465bd
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/actions.js
@@ -0,0 +1,9 @@
+import actionTypes from './action-types'
+
+export const appendResults = (payload) => (dispatch) => {
+  dispatch({ type: actionTypes.APPEND_RESULTS, payload })
+}
+
+export const setContributors = (payload) => (dispatch) => {
+  dispatch({ type: actionTypes.SET_CONTRIBUTORS, payload })
+}
diff --git a/akvo/rsr/spa/app/modules/program-overview/filters.js b/akvo/rsr/spa/app/modules/program-overview/filters.js
new file mode 100644
index 000000000..e1f1c8fb5
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/filters.js
@@ -0,0 +1,70 @@
+export const findPartners = (filtering, cb) => filtering
+  .partners
+  .items
+  .find((it) => Object.keys(cb?.partners).includes(`${it.id}`))
+
+export const findProjects = (filtering, cb) => filtering
+  .contributors
+  .items
+  .find((it) => it.id === cb.projectId)
+
+export const findCountries = (filtering, cb) => filtering
+  .countries
+  .items.find((it) => (cb.country && it.id === cb.country.isoCode))
+
+export const hasAllCriteria = filtering => (
+  (filtering.contributors.items.length && filtering.contributors.apply) &&
+  (filtering.countries.items.length && filtering.countries.apply) &&
+  (filtering.partners.items.length && filtering.partners.apply)
+)
+
+export const onlyHasContributors = filtering => (
+  (filtering.contributors.items.length && filtering.contributors.apply) &&
+  !filtering.countries.apply &&
+  !filtering.partners.apply
+)
+
+export const hasContribAndCountries = filtering => (
+  (filtering.contributors.items.length && filtering.contributors.apply) &&
+  (filtering.countries.items.length && filtering.countries.apply) &&
+  !filtering.partners.apply
+)
+
+export const onlyHasCountries = filtering => (
+  !filtering.contributors.apply &&
+  (filtering.countries.items.length && filtering.countries.apply) &&
+  !filtering.partners.apply
+)
+
+export const hasCountriesAndPartners = filtering => (
+  !filtering.contributors.apply &&
+  (filtering.countries.items.length && filtering.countries.apply) &&
+  (filtering.partners.items.length && filtering.partners.apply)
+)
+
+export const hasContribAndPartners = filtering => (
+  (filtering.contributors.items.length && filtering.contributors.apply) &&
+  !filtering.countries.apply &&
+  (filtering.partners.items.length && filtering.partners.apply)
+)
+
+export const onlyHasPartners = filtering => (
+  !filtering.contributors.apply &&
+  !filtering.countries.apply &&
+  (filtering.partners.items.length && filtering.partners.apply)
+)
+
+export const getStatusFiltering = (filtering) => {
+  const allFilters = Object.values(filtering).filter(({ apply }) => (apply))
+  const hasPeriod = (allFilters.filter((t) => t.key === 'periods').length > 0)
+  const hasCountry = (allFilters.filter((t) => t.key === 'countries').length > 0)
+  const hasContrib = (allFilters.filter((t) => t.key === 'contributors').length > 0)
+  const hasPartner = (allFilters.filter((t) => t.key === 'partners').length > 0)
+  return {
+    allFilters,
+    hasPeriod,
+    hasCountry,
+    hasContrib,
+    hasPartner
+  }
+}
diff --git a/akvo/rsr/spa/app/modules/program-overview/query.js b/akvo/rsr/spa/app/modules/program-overview/query.js
new file mode 100644
index 000000000..c508fb136
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/query.js
@@ -0,0 +1,278 @@
+import { groupBy, sumBy, uniq, uniqBy } from 'lodash'
+import moment from 'moment'
+
+import countriesDict from '../../utils/countries-dict'
+import { getFlatten, getShrink } from '../../utils/misc'
+import {
+  findCountries,
+  findPartners,
+  findProjects,
+  getStatusFiltering,
+  hasAllCriteria,
+  hasContribAndCountries,
+  hasContribAndPartners,
+  hasCountriesAndPartners,
+  onlyHasContributors,
+  onlyHasCountries,
+  onlyHasPartners
+} from './filters'
+import { setProjectSubtitle } from './transform'
+
+const getSingleClassStatus = p => (
+  (p?.contributors?.length === 1) ||
+  (
+    p?.fetched &&
+    p?.contributors?.filter(it => it.total > 0)?.length === 0
+  )
+)
+
+export const getAllCountries = (contributors, filtering) => {
+  const { hasCountry } = getStatusFiltering(filtering)
+  const countries = contributors
+    ?.filter((c) => c?.country?.isoCode)
+    ?.filter((c) => ((hasCountry && findCountries(filtering, c)) || !hasCountry))
+    ?.map((c) => countriesDict[c.country.isoCode] || null)
+    ?.filter((c) => c)
+  return uniq(countries)
+}
+
+const getDisaggregations = contributors => contributors
+  ?.map((c) => ({ ...c, updates: c?.updates || [] }))
+  ?.flatMap((c) => c?.updates)
+  ?.filter((u) => u?.disaggregations)
+  ?.flatMap((u) => u?.disaggregations)
+  ?.sort((a, b) => a.value - b.value)
+
+const getTheSumResult = (data, field, decimalPlaces = 3) => Number(parseFloat(sumBy(data, field), 10).toFixed(decimalPlaces))
+
+const getTopParent = (contributors, id) => {
+  const obj = contributors?.find((c) => c.id === id)
+  if (obj) {
+    return obj.parentId === null ? obj : getTopParent(contributors, obj.parentId)
+  }
+  return obj
+}
+
+const handleOnParentConcat = (contributors, allItems) => {
+  const items = contributors
+    ?.flatMap((a) => {
+      const parent = getTopParent(allItems, a.parentId)
+      return [
+        parent,
+        {
+          ...a,
+          parentId: parent?.id
+        }
+      ]
+    })
+  return uniqBy(items, 'id')?.filter((item) => item)
+}
+
+const handleOnFilteringContributors = (filtering, contributors) => {
+  let allContributors = contributors?.sort((a, b) => a?.value?.localeCompare(b?.value))
+
+  if (hasAllCriteria(filtering)) {
+    allContributors = allContributors
+      ?.filter((cb) => (cb?.country))
+      ?.filter((cb) => (
+        findProjects(filtering, cb) &&
+        findCountries(filtering, cb) &&
+        findPartners(filtering, cb)
+      ))
+  }
+  if (onlyHasContributors(filtering)) {
+    allContributors = allContributors?.filter((cb) => findProjects(filtering, cb))
+  }
+
+  if (hasContribAndCountries(filtering)) {
+    allContributors = allContributors
+      ?.filter((cb) => (cb?.country))
+      ?.filter((cb) => {
+        return (
+          findProjects(filtering, cb) &&
+          findCountries(filtering, cb)
+        )
+      })
+  }
+
+  if (onlyHasCountries(filtering)) {
+    allContributors = allContributors
+      ?.filter((cb) => (cb?.country))
+      ?.filter((cb) => findCountries(filtering, cb))
+  }
+
+  if (hasCountriesAndPartners(filtering)) {
+    allContributors = allContributors
+      ?.filter((cb) => (cb?.country))
+      ?.filter((cb) => {
+        return (
+          findCountries(filtering, cb) &&
+          findPartners(filtering, cb)
+        )
+      })
+  }
+
+  if (hasContribAndPartners(filtering)) {
+    allContributors = allContributors?.filter((cb) => {
+      return (
+        findProjects(filtering, cb) &&
+        findPartners(filtering, cb)
+      )
+    })
+  }
+
+  if (onlyHasPartners(filtering)) {
+    allContributors = allContributors?.filter((cb) => findPartners(filtering, cb))
+  }
+  return allContributors
+}
+
+const handleOnFilteringDisaggregations = (filtering, isFiltering, disaggregations) => {
+  const dsgGroups = groupBy(disaggregations, 'category')
+  return Object.keys(dsgGroups)
+    ?.map((dsgKey) => {
+      const groupTypes = groupBy(dsgGroups[dsgKey], 'type')
+      const groupItems = Object.keys(groupTypes)
+        ?.filter((typeKey) => {
+          const { hasCountry } = getStatusFiltering(filtering)
+          if (hasCountry && dsgKey?.toLowerCase() === 'country') {
+            return filtering
+              .countries
+              .items.filter((ci) => {
+                const currentCountry = ci?.value?.toLowerCase()
+                const country = typeKey?.toLowerCase()
+                const regex = new RegExp(`${currentCountry}*`, 'g')
+                return regex.test(country) || country === currentCountry || currentCountry.includes(country)
+              })
+              .length
+          }
+          return typeKey
+        })
+        ?.map((typeKey) => ({
+          ...groupTypes[typeKey][0] || {},
+          total: getTheSumResult(groupTypes[typeKey], 'value')
+        }))
+        ?.filter((v) => ((isFiltering && v.total) || !isFiltering))
+        ?.sort((a, b) => a.total - b.total)
+      return {
+        name: dsgKey,
+        items: groupItems
+      }
+    })
+    ?.filter((item) => ((isFiltering && item.items.length) || !isFiltering))
+}
+
+export const handleOnFiltering = (results, filtering, search) => {
+  const isFiltering = Object.keys(filtering).filter((_key) => filtering[_key]?.apply).length
+  return results
+    ?.map((r) => {
+      if (search) {
+        const keyword = search?.toLowerCase()
+        const findIndicators = r
+          ?.indicators
+          ?.map((i) => ({
+            ...i,
+            matched: (i?.title?.toLowerCase().indexOf(keyword) > -1)
+          }))
+          ?.filter((i) => (i.matched))
+        const findResult = r?.title?.toLowerCase()?.indexOf(keyword) > -1
+        return {
+          ...r,
+          indicators: (findResult && !findIndicators?.length) ? r?.indicators : findIndicators,
+          matched: (findResult)
+        }
+      }
+      return r
+    })
+    ?.map((r) => ({
+      ...r,
+      indicators: r
+        ?.indicators
+        ?.map((i) => {
+          const periods = i?.periods
+            ?.sort((a, b) => moment(a.periodStart, 'DD/MM/YYYY').unix() - moment(b.periodStart, 'DD/MM/YYYY').unix())
+            ?.filter((p) => {
+              if (filtering.periods.items.length && filtering.periods.apply) {
+                return filtering
+                  .periods
+                  .items.filter((ip) => {
+                    const [periodStart, periodEnd] = ip?.value?.split(' - ')
+                    return (p.periodStart === periodStart && p.periodEnd === periodEnd)
+                  })
+                  .length > 0
+              }
+              return p
+            })
+            ?.map((p) => {
+              const allItems = getFlatten(p?.contributors)
+              let allContributors = handleOnFilteringContributors(filtering, allItems)?.map((cb) => setProjectSubtitle(filtering, cb))
+              allContributors = isFiltering ? handleOnParentConcat(allContributors, allItems) : allContributors
+              const contribTransform = getShrink(allContributors)
+              const contributors = contribTransform?.length ? contribTransform : allContributors
+
+              const disaggregations = getDisaggregations(contributors)
+              const dsgItems = handleOnFilteringDisaggregations(filtering, isFiltering, disaggregations)
+
+              const actualValue = p?.fetched ? getTheSumResult(contributors, 'total') : null
+
+              const countries = getAllCountries(allContributors, filtering)
+              const single = getSingleClassStatus(p)
+              return ({
+                ...p,
+                single,
+                dsgItems,
+                actualValue,
+                disaggregations,
+                countries,
+                contributors
+              })
+            })
+          const sumActualValue = periods.reduce((total, currentValue) => total + currentValue.actualValue, 0)
+          return ({
+            ...i,
+            sumActualValue,
+            periods: periods
+              ?.filter((p) => {
+                if (isFiltering) {
+                  return (p?.contributors?.length)
+                }
+                return p
+              })
+          })
+        })
+        ?.filter((i) => {
+          if (isFiltering) {
+            return (i?.periods?.length)
+          }
+          return i
+        })
+    }))
+    ?.filter((r) => {
+      if (isFiltering || search) {
+        return (r?.indicators?.length)
+      }
+      return r
+    })
+}
+
+export const handleOnCountFiltering = (results, filtering, search) => {
+  const { allFilters, hasPeriod, hasCountry, hasContrib, hasPartner } = getStatusFiltering(filtering)
+  if (search && !allFilters.length) {
+    return [...results, ...results?.flatMap((r) => r?.indicators)]?.filter((r) => r.matched)?.length
+  }
+  if (hasPeriod && (!hasCountry && !hasContrib && !hasPartner)) {
+    return results
+      ?.flatMap((r) => r?.indicators)
+      ?.flatMap((r) => r?.periods)
+      ?.length
+  }
+  if (hasCountry || hasContrib || hasPartner) {
+    return results
+      ?.flatMap((r) => r?.indicators)
+      ?.flatMap((i) => i?.periods)
+      ?.flatMap((p) => p?.contributors)
+      ?.flatMap((c) => [c, ...c?.contributors])
+      ?.length
+  }
+  return results?.length
+}
diff --git a/akvo/rsr/spa/app/modules/program-overview/reducer.js b/akvo/rsr/spa/app/modules/program-overview/reducer.js
new file mode 100644
index 000000000..8867c7428
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/reducer.js
@@ -0,0 +1,28 @@
+import actionTypes from './action-types'
+
+export default (state = [], action) => {
+  switch (action.type) {
+    case actionTypes.APPEND_RESULTS:
+      return action.payload
+    case actionTypes.SET_CONTRIBUTORS:
+      const { periodID, data } = action.payload
+      return state.map((s) => ({
+        ...s,
+        indicators: s.indicators.map((i) => ({
+          ...i,
+          periods: i.periods.map((p) => {
+            if (p.id === periodID) {
+              return {
+                ...p,
+                contributors: data,
+                fetched: true
+              }
+            }
+            return p
+          })
+        }))
+      }))
+    default:
+      return state
+  }
+}
diff --git a/akvo/rsr/spa/app/modules/program-overview/styles.scss b/akvo/rsr/spa/app/modules/program-overview/styles.scss
new file mode 100644
index 000000000..53dc8d999
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/styles.scss
@@ -0,0 +1,154 @@
+@import "../program/styles.scss";
+
+.program-view > .ant-collapse > .ant-collapse-item > .ant-collapse-header .expander + div h1 span.ant-typography,
+.program-view > .ant-collapse > .ant-collapse-item > .ant-collapse-header .expander + div h1 span.ant-typography span {
+  color: rgba(0, 0, 0, 0.85) !important;
+  margin-left: 0px;
+  opacity: 1;
+}
+.program-view .ant-collapse {
+  margin-top: 15px;
+}
+.program-view .main-header {
+  & + .ant-tabs {
+    margin-bottom: 0 !important;
+  }
+}
+#program-filter-bar {
+  position: sticky;
+  top: 0;
+  z-index: 999;
+  padding: 16px 0;
+  background: #fff;
+  box-shadow: 0 2px 2px #dcdcdc;
+}
+.color-periods {
+  color: #eb874f !important;
+  &.ant-tag,
+  &.ant-btn {
+    border: 2px solid #eb874f;
+    color: #212121;
+    font-weight: bold;
+    background-color: #e9dbd2;
+  }
+}
+.color-contributors {
+  color: #43998f !important;
+  &.ant-tag,
+  &.ant-btn {
+    border: 2px solid #43998f;
+    color: #212121;
+    font-weight: bold;
+    background-color: #ecfdf3;
+  }
+}
+.color-countries {
+  color: #4a48f0 !important;
+  &.ant-tag,
+  &.ant-btn {
+    border: 2px solid #4a48f0;
+    color: #212121;
+    font-weight: bold;
+    background-color: #ceceea;
+  }
+}
+.color-partners {
+  color: #1b73cc !important;
+  &.ant-tag,
+  &.ant-btn {
+    border: 2px solid #1b73cc;
+    color: #212121;
+    font-weight: bold;
+    background-color: #e3effc;
+  }
+}
+[class*="color-"].ant-tag {
+  padding: 4px 8px;
+  color: #212121 !important;
+}
+[class*="color-"].ant-btn {
+  font-size: 11px;
+  width: 35px;
+  height: 35px;
+  top: -13px;
+}
+h4[class*="color-"],
+span[class*="color-"] {
+  font-weight: 500 !important;
+}
+.ant-tag .anticon-close {
+  margin-right: 8px;
+  color: #212121;
+  font-weight: 800;
+}
+.mt-30 {
+  margin-top: 30px;
+}
+.filter-more-items .ant-list-item {
+  padding: 0;
+}
+.filter-more-items .filter-more-item {
+  width: 100%;
+}
+.filter-more .ant-popover-content {
+  max-height: 450px;
+  overflow-y: auto;
+}
+.filter-more-items .filter-more-item div.value,
+span[class*="color-"].ant-tag {
+  max-width: 250px;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+  overflow: hidden;
+  margin-bottom: 2px;
+}
+.ant-typography mark {
+  background-color: #e6f7ff;
+  border-bottom: 2px solid #1890ff;
+}
+h1 > .ant-typography > mark {
+  color: #1890ff;
+}
+.rsr-card-filter-container {
+  z-index: 9999;
+  position: absolute;
+  top: 75px;
+  right: 0;
+  display: none;
+  min-width: 400px;
+  max-height: 650px;
+  overflow-y: scroll;
+  &.show {
+    display: block;
+  }
+  .ant-row,
+  .ant-card-body {
+    max-width: 400px;
+  }
+  .ant-collapse-item {
+    min-width: 327px;
+  }
+  .header-filter {
+    padding-bottom: 16px;
+    border-bottom: 1px solid #e8e8e8;
+  }
+}
+.charts {
+  canvas.chartjs-render-monitor {
+    width: 160px !important;
+    height: 68px !important;
+  }
+  .percent-label {
+    max-width: 150px;
+    text-align: center;
+    font-size: 12px;
+    font-weight: 600;
+    color: #68958f;
+  }
+}
+
+@media (max-width: 767px) and (orientation: landscape) {
+  .rsr-card-filter-container {
+    max-height: 350px;
+  }
+}
diff --git a/akvo/rsr/spa/app/modules/program-overview/transform.js b/akvo/rsr/spa/app/modules/program-overview/transform.js
new file mode 100644
index 000000000..657e51f7b
--- /dev/null
+++ b/akvo/rsr/spa/app/modules/program-overview/transform.js
@@ -0,0 +1,14 @@
+import { getStatusFiltering } from './filters'
+
+export const setProjectSubtitle = (filtering, cb) => {
+  const { hasPartner } = getStatusFiltering(filtering)
+
+  if (hasPartner) {
+    const partners = Object.values(cb?.partners)
+      ?.filter((pr) => (filtering.partners.items.find((it) => it.value === pr)))
+
+    const projectSubtitle = partners.length ? partners?.join(', ') : cb.projectSubtitle
+    return ({ ...cb, projectSubtitle })
+  }
+  return cb
+}
diff --git a/akvo/rsr/spa/app/modules/program/ProgramPeriod.jsx b/akvo/rsr/spa/app/modules/program/ProgramPeriod.jsx
index 59db9a13d..fce38459b 100644
--- a/akvo/rsr/spa/app/modules/program/ProgramPeriod.jsx
+++ b/akvo/rsr/spa/app/modules/program/ProgramPeriod.jsx
@@ -85,8 +85,8 @@ const PeriodHeader = ({
               />
             )}
             <div className="stat value">
-              <div className="label">aggregated actual value</div>
-              <b>{String(actualValue).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</b>
+              <div className="label">Aggregate Actual</div>
+              <b>{setNumberFormat(actualValue)}</b>
               {targetsAt && targetsAt === 'period' && targetValue > 0 && (
                 <span>
                   of <b>{setNumberFormat(countryFilter.length > 0 ? aggFilteredTotalTarget : targetValue)}</b> target
diff --git a/akvo/rsr/spa/app/modules/program/ProjectSummary.jsx b/akvo/rsr/spa/app/modules/program/ProjectSummary.jsx
index de1ab0f1a..845b1702f 100644
--- a/akvo/rsr/spa/app/modules/program/ProjectSummary.jsx
+++ b/akvo/rsr/spa/app/modules/program/ProjectSummary.jsx
@@ -1,10 +1,10 @@
 import React from 'react'
 import moment from 'moment'
 import { Icon, Tooltip } from 'antd'
+import { setNumberFormat } from '../../utils/misc'
 
 const getAggregatedUpdatesLength = (updates, contributors) => {
-  let total = 0
-  total += updates.filter(it => it.status && it.status.code === 'A').length
+  let total = updates?.filter(it => (it.status && it.status.code === 'A') || it.status === 'A')?.length || 0
   contributors?.forEach(contrib => {
     total += getAggregatedUpdatesLength(updates, contrib)
   })
@@ -36,7 +36,7 @@ const ProjectSummary = ({
           openedItem === _index
             ? (
               <div className="value">
-                <b>{String(updatesValue).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</b>
+                <b>{setNumberFormat(updatesValue)}</b>
                 {actualValue > 0 && <small>{Math.round(((updatesValue) / actualValue) * 100 * 10) / 10}%</small>}
                 {updates.length > 0 &&
                   <div className="updates-popup">
@@ -51,7 +51,7 @@ const ProjectSummary = ({
             :
             (
               <div className="value">
-                <b>{String(actualValue).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</b>
+                <b>{setNumberFormat(actualValue)}</b>
                 {aggFilteredTotal > 0 && <small>{Math.round((actualValue / aggFilteredTotal) * 100 * 10) / 10}%</small>}
               </div>
             )
diff --git a/akvo/rsr/spa/app/modules/program/indicator.jsx b/akvo/rsr/spa/app/modules/program/indicator.jsx
index 0b6e48cf0..b24d5d108 100644
--- a/akvo/rsr/spa/app/modules/program/indicator.jsx
+++ b/akvo/rsr/spa/app/modules/program/indicator.jsx
@@ -74,7 +74,7 @@ const Indicator = ({
         <Row type="flex" justify="end" align="middle">
           <Col span={4} className="stats-indicator text-right">
             <div className="stat value">
-              <div className="label">aggregated actual value</div>
+              <div className="label">Aggregate Actual</div>
               <b>{setNumberFormat(sumActualValue)}</b><br />
               <span>
                 of <b>{indicator.targetValue}</b> target
diff --git a/akvo/rsr/spa/app/modules/program/sticky-class.jsx b/akvo/rsr/spa/app/modules/program/sticky-class.jsx
index 4765292f1..d625cebc3 100644
--- a/akvo/rsr/spa/app/modules/program/sticky-class.jsx
+++ b/akvo/rsr/spa/app/modules/program/sticky-class.jsx
@@ -5,7 +5,7 @@ const StickyClass = ({ children, top = 0, offset = 0 }) => {
   const ref = useRef()
   const boolRef = useRef(false)
   const scrollHandler = () => {
-    if (window.scrollY + top - offset >= ref.current.offsetParent.parentNode.offsetTop){
+    if (ref.current && ref.current.offsetParent && (window.scrollY + top - offset >= ref.current.offsetParent.parentNode.offsetTop)){
       if (!boolRef.current){
         boolRef.current = true
         ref.current.parentNode.classList.add('stuck')
diff --git a/akvo/rsr/spa/app/modules/program/styles.scss b/akvo/rsr/spa/app/modules/program/styles.scss
index 9bdd6239f..890c6a26b 100644
--- a/akvo/rsr/spa/app/modules/program/styles.scss
+++ b/akvo/rsr/spa/app/modules/program/styles.scss
@@ -162,13 +162,6 @@
           top: 0;
         }
       }
-      &:nth-child(2n)>.ant-collapse-content>.ant-collapse-content-box>.ant-collapse>.ant-collapse-item>.ant-collapse-header{
-          &.stuck{
-            h3{
-              background-color: #f7f7f7;
-            }
-          }
-        }
       &>.ant-collapse-content > .ant-collapse-content-box{
         padding: 0;
       }
@@ -181,12 +174,17 @@
           &:not(:last-of-type){
             margin-bottom: 15px;
           }
+          &.hasAnyFilters > .ant-collapse-header {
+            top: 172px;
+          }
           &>.ant-collapse-header{
             padding-left: 16px;
             padding-right: 40px;
             position: sticky;
-            top: 37px;
+            top: 84px;
             z-index: 4;
+            background-color: #fff;
+            border-bottom: 1px solid #dedede;
             .expander{
               position: absolute;
               left: auto;
@@ -215,6 +213,9 @@
               &.periods{
                 margin-left: 15px;
                 opacity: 0.5;
+                &.color-periods {
+                  opacity: 1;
+                }
               }
             }
             &.stuck{
@@ -222,7 +223,6 @@
               h3{
                 padding-bottom: 10px;
                 margin-bottom: 0px;
-                background-color: #fff;
                 height: 42px;
                 overflow: hidden;
                 white-space: nowrap;
@@ -251,11 +251,17 @@
               .indicator>.ant-collapse{
                 background: transparent;
                 &>.ant-collapse-item{
+                  &.hasAnyFilters > .ant-collapse-header {
+                    top: 245px;
+                  }
+                  &.hasAChart > .ant-collapse-header {
+                    top: 198px;
+                  }
                   &>.ant-collapse-header{
                     display: flex;
                     padding-left: 12px;
                     position: sticky;
-                    top: 80px;
+                    top: 160px;
                     z-index: 3;
                     background-color: #fff;
                     color: #333;
@@ -380,7 +386,10 @@
                       z-index: 2;
                     }
                   }
-                  &.ant-collapse-item-active:not(.empty):not(.single):not(.qualitative)>.ant-collapse-header{
+                  &.ant-collapse-item-active.emptyBar > .ant-collapse-header{
+                    padding-bottom: 0;
+                  }
+                  &.ant-collapse-item-active:not(.empty):not(.single):not(.qualitative):not(.emptyBar) >.ant-collapse-header {
                     padding-bottom: 48px;
                     .bar{
                       height: 42px;
diff --git a/akvo/rsr/spa/app/modules/results-admin/TobeReported.jsx b/akvo/rsr/spa/app/modules/results-admin/TobeReported.jsx
index 8bcf3ecc4..356ff3d94 100644
--- a/akvo/rsr/spa/app/modules/results-admin/TobeReported.jsx
+++ b/akvo/rsr/spa/app/modules/results-admin/TobeReported.jsx
@@ -175,7 +175,7 @@ const TobeReported = ({
                   {((!isEmpty(item?.indicator?.description.trim())) && item?.indicator?.description?.trim().length > 5) && (
                     <details>
                       <summary>{t('Description')}</summary>
-                      <p className="desc hide-for-mobile">{mdOutput(mdParse(item?.indicator?.description))}</p>
+                      <div className="desc hide-for-mobile">{mdOutput(mdParse(item?.indicator?.description))}</div>
                     </details>
                   )}
                 </Col>
diff --git a/akvo/rsr/spa/app/modules/results-overview/ResultOverview.jsx b/akvo/rsr/spa/app/modules/results-overview/ResultOverview.jsx
index 62cbf3a45..948fd6fae 100644
--- a/akvo/rsr/spa/app/modules/results-overview/ResultOverview.jsx
+++ b/akvo/rsr/spa/app/modules/results-overview/ResultOverview.jsx
@@ -200,7 +200,7 @@ const ResultOverview = ({
                               <Col span={3} className="target-indicator" style={{ paddingRight: 10 }}>
                                 <ul>
                                   <li>
-                                    <div className="label">aggregated actual value</div>
+                                    <div className="label">Aggregate Actual</div>
                                   </li>
                                   <li>
                                     <h4 className="value"><b>{setNumberFormat(sumActualValue)}</b></h4>
diff --git a/akvo/rsr/spa/app/modules/results/results.jsx b/akvo/rsr/spa/app/modules/results/results.jsx
index 78570b9ba..0a93039ed 100644
--- a/akvo/rsr/spa/app/modules/results/results.jsx
+++ b/akvo/rsr/spa/app/modules/results/results.jsx
@@ -236,7 +236,7 @@ const Indicator = ({ setResults, indicator, treeFilter, statusFilter, pushUpdate
           <Col span={16} />
           <Col span={4} className="stats-indicator">
             <div className="stat value">
-              <div className="label">aggregated actual value</div>
+              <div className="label">Aggregate Actual</div>
               <b>{setNumberFormat(sumActualValue)}</b><br />
               <span>
                 of <b>{indicator?.targetValue}</b> target
diff --git a/akvo/rsr/spa/app/root.jsx b/akvo/rsr/spa/app/root.jsx
index 475bfb968..0e05df2e5 100644
--- a/akvo/rsr/spa/app/root.jsx
+++ b/akvo/rsr/spa/app/root.jsx
@@ -17,6 +17,7 @@ import Users from './modules/users/users'
 import Reports from './modules/reports/reports'
 import IATI from './modules/iati/iati'
 import Profile from './modules/profile/profile'
+import ProgramOverview from './modules/program-overview/ProgramOverview'
 
 if (!(env && env.LOCALDEV)) {
   Sentry.init({
@@ -63,12 +64,12 @@ const Root = ({ dispatch }) => {
           </Route>
           <Route path="/hierarchy/:projectId?" component={Hierarchy} />
           <Route path="/projects/:id" render={({ match }) => <ProjectView {...{ jwtView, match }} />} />
-          <Route path="/programs/:projectId" component={Program} />
           <Route path="/users" component={Users} />
           <Route path="/reports" component={Reports} />
           <Route path="/iati" component={IATI} />
           <Route path="/my-details" component={Profile} />
         </div>
+        <Route path="/programs/:projectId" component={ProgramOverview} />
       </div>
       </LastLocationProvider>
     </Router>
diff --git a/akvo/rsr/spa/app/store/config.js b/akvo/rsr/spa/app/store/config.js
index 7af346d41..300d977fb 100644
--- a/akvo/rsr/spa/app/store/config.js
+++ b/akvo/rsr/spa/app/store/config.js
@@ -10,7 +10,7 @@ export default (initialState) => {
   const rootPersistConfig = {
     key: 'root',
     storage,
-    blacklist: ['userRdr', 'editorRdr', 'resultRdr']
+    blacklist: ['userRdr', 'editorRdr', 'resultRdr', 'filterRdr']
   }
   const persistedReducer = persistReducer(rootPersistConfig, rootReducer)
   const store = createStore(
diff --git a/akvo/rsr/spa/app/store/filter/action-types.js b/akvo/rsr/spa/app/store/filter/action-types.js
new file mode 100644
index 000000000..a83f86e93
--- /dev/null
+++ b/akvo/rsr/spa/app/store/filter/action-types.js
@@ -0,0 +1,6 @@
+export default {
+  SET_FILTER_ITEMS: 'FL_SET_FILTER_ITEMS',
+  REMOVE_FILTER_ITEM: 'FL_REMOVE_FILTER_ITEM',
+  APPLY_FILTER: 'FL_APPLY_FILTER',
+  CLEAR_FILTER: 'FL_CLEAR_FILTER',
+}
diff --git a/akvo/rsr/spa/app/store/filter/actions.js b/akvo/rsr/spa/app/store/filter/actions.js
new file mode 100644
index 000000000..1b08a2e41
--- /dev/null
+++ b/akvo/rsr/spa/app/store/filter/actions.js
@@ -0,0 +1,17 @@
+import actionTypes from './action-types'
+
+export const setFilterItems = (payload) => (dispatch) => {
+  dispatch({ type: actionTypes.SET_FILTER_ITEMS, payload })
+}
+
+export const removeFilterItem = (payload) => (dispatch) => {
+  dispatch({ type: actionTypes.REMOVE_FILTER_ITEM, payload })
+}
+
+export const applyFilter = (payload) => (dispatch) => {
+  dispatch({ type: actionTypes.APPLY_FILTER, payload })
+}
+
+export const clearFilter = () => (dispatch) => {
+  dispatch({ type: actionTypes.CLEAR_FILTER })
+}
diff --git a/akvo/rsr/spa/app/store/filter/reducer.js b/akvo/rsr/spa/app/store/filter/reducer.js
new file mode 100644
index 000000000..023169da4
--- /dev/null
+++ b/akvo/rsr/spa/app/store/filter/reducer.js
@@ -0,0 +1,57 @@
+import actionTypes from './action-types'
+
+const initialState = {
+  countries: {
+    items: [],
+    apply: false
+  },
+  contributors: {
+    items: [],
+    apply: false
+  },
+  periods: {
+    items: [],
+    apply: false
+  },
+  partners: {
+    items: [],
+    apply: false
+  }
+}
+
+export default (state = initialState, action) => {
+  const { fieldName, data, id } = action.payload || {}
+  switch (action.type) {
+    case actionTypes.SET_FILTER_ITEMS:
+      return {
+        ...state,
+        [fieldName]: {
+          ...state[fieldName],
+          key: fieldName,
+          items: data
+        }
+      }
+    case actionTypes.REMOVE_FILTER_ITEM:
+      const items = state[fieldName]?.items?.filter((d) => d.id !== id)
+      return {
+        ...state,
+        [fieldName]: {
+          ...state[fieldName],
+          apply: (items.length),
+          items
+        }
+      }
+    case actionTypes.APPLY_FILTER:
+      return {
+        ...state,
+        [fieldName]: {
+          ...state[fieldName],
+          apply: true
+        }
+      }
+    case actionTypes.CLEAR_FILTER:
+      return initialState
+    default:
+      return state
+  }
+}
diff --git a/akvo/rsr/spa/app/store/root-reducer.js b/akvo/rsr/spa/app/store/root-reducer.js
index 7ed7e8a0f..67156d230 100644
--- a/akvo/rsr/spa/app/store/root-reducer.js
+++ b/akvo/rsr/spa/app/store/root-reducer.js
@@ -5,6 +5,8 @@ import storage from 'redux-persist/lib/storage'
 import editorRdr from '../modules/editor/reducer'
 import userRdr from './user-reducer'
 import resultRdr from '../modules/results/reducer'
+import programRdr from '../modules/program-overview/reducer'
+import filterRdr from './filter/reducer'
 
 const userPersistConfig = {
   key: 'userRdr',
@@ -29,7 +31,9 @@ const editorPersistConfig = {
 const rootReducer = combineReducers({
   editorRdr: persistReducer(editorPersistConfig, editorRdr),
   userRdr: persistReducer(userPersistConfig, userRdr),
-  resultRdr
+  resultRdr,
+  programRdr,
+  filterRdr,
 })
 
 export default rootReducer
diff --git a/akvo/rsr/spa/app/styles/main.scss b/akvo/rsr/spa/app/styles/main.scss
index ef90172a4..ae966f0e4 100644
--- a/akvo/rsr/spa/app/styles/main.scss
+++ b/akvo/rsr/spa/app/styles/main.scss
@@ -206,7 +206,7 @@ ol{
 }
 .announcement-btn-circle {
   position: fixed;
-  z-index: 9999;
+  z-index: 999;
   bottom: 5%;
   right: 5%;
   &:hover {
diff --git a/akvo/rsr/spa/app/utils/misc.js b/akvo/rsr/spa/app/utils/misc.js
index 43dfaffc1..ac7db0bf3 100644
--- a/akvo/rsr/spa/app/utils/misc.js
+++ b/akvo/rsr/spa/app/utils/misc.js
@@ -1,5 +1,6 @@
 /* globals FileReader, window */
 import { diff } from 'deep-object-diff'
+import defaults from 'lodash/defaults'
 
 export const datePickerConfig = {
   format: 'DD/MM/YYYY',
@@ -181,12 +182,41 @@ export const setNumberFormat = (amount, separator = ',') => {
  */
 export const wordWrap = (s, w) => {
   return s
-  ? s.replace(
-    new RegExp(`(?![^\\n]{1,${w}}$)([^\\n]{1,${w}})\\s`, 'g'), '$1<br/>'
+    ? s.replace(
+      new RegExp(`(?![^\\n]{1,${w}}$)([^\\n]{1,${w}})\\s`, 'g'), '$1<br/>'
     )
-  : ''
+    : ''
 }
 
+export const getFirstLetter = (dataString) => {
+  const index = Array.from({ length: dataString.length }).findIndex((_, x) => (/^[a-zA-Z]+$/.test(dataString[x])))
+  return dataString[index] || dataString[0]
+}
 export const splitPeriod = value => value?.split('-')?.map((v) => v.trim())
 
 export const getProjectUuids = (path) => path?.split('.')?.map((value) => value?.replace(/_/g, '-'))
+export const getFlatten = data => {
+  let children = []
+  let flattened = data.map(m => {
+    if (m.contributors && m.contributors.length) {
+      children = [...children, ...m.contributors.map((cb) => ({ ...cb, parentId: m.id }))]
+    }
+    return m
+  })
+  flattened = flattened.concat(children.length ? getFlatten(children) : children)
+  return flattened?.map((f) => {
+    const { contributors, ...item } = f
+    return (item?.parentId === undefined) ? ({ ...item, parentId: null }) : item
+  })
+}
+
+export const getShrink = items => {
+  const nodes = {}
+  return items.filter((obj) => {
+    const id = obj.id
+    const parentId = obj.parentId
+    nodes[id] = defaults(obj, nodes[id], { contributors: [] })
+    parentId && (nodes[parentId] = (nodes[parentId] || { contributors: [] })).contributors.push(obj)
+    return !parentId
+  })
+}
diff --git a/akvo/rsr/spa/app/utils/target-charts.jsx b/akvo/rsr/spa/app/utils/target-charts.jsx
index 10dcf4ea6..03e7f9a47 100644
--- a/akvo/rsr/spa/app/utils/target-charts.jsx
+++ b/akvo/rsr/spa/app/utils/target-charts.jsx
@@ -1,45 +1,25 @@
-/* eslint-disable no-unused-vars */
-import React, { useRef, useEffect, useState } from 'react'
-import Chart from 'chart.js'
+import React, { useEffect, useState } from 'react'
+import SemiCircle from '../components/SemiCircle'
 
 const TargetCharts = ({ actualValue, targetValue }) => {
-  const [preload, setPreload] = useState(true)
-  const canvasRef = useRef(null)
-  let percent = (actualValue / targetValue) * 100
-  if (percent > 100) percent = 100
-  const datasets = [
-    {
-      data: [percent, 100 - percent],
-      backgroundColor: ['#389a90', '#e1eded'],
-      hoverBorderWidth: 3,
-      hoverBorderColor: '#fff',
-      hoverBackgroundColor: ['#389a90', '#e1eded']
-    }
-  ]
-  const labels = []
+  const [actual, setActual] = useState(0)
+
+  const handleOnSetPercentage = (numerator, denumerator) => {
+    let percent = (numerator / denumerator) * 100
+    if (percent > 100) percent = 100
+    return percent
+  }
+
   useEffect(() => {
-    if (canvasRef && preload) {
-      setPreload(false)
-      const _chart = new Chart(canvasRef.current, {
-        type: 'doughnut',
-        data: { datasets, labels },
-        options: {
-          cutoutPercentage: 37,
-          circumference: Math.PI,
-          rotation: -Math.PI,
-          tooltips: {
-            enabled: false
-          },
-          legend: {
-            display: false
-          }
-        }
-      })
+    if (actual !== actualValue) {
+      setActual(actualValue)
     }
-  })
+  }, [actual, actualValue])
+
+  const percent = handleOnSetPercentage(actualValue, targetValue)
   return (
     <div className="charts">
-      <canvas width={150} height={68} ref={ref => { canvasRef.current = ref }} />
+      <SemiCircle percent={percent} />
       <div className="percent-label">{Math.round((actualValue / targetValue) * 100)}%</div>
     </div>
   )
diff --git a/akvo/rsr/spa/package-lock.json b/akvo/rsr/spa/package-lock.json
index d35bebd94..1cb94cf04 100644
--- a/akvo/rsr/spa/package-lock.json
+++ b/akvo/rsr/spa/package-lock.json
@@ -14406,6 +14406,11 @@
         "has-flag": "^3.0.0"
       }
     },
+    "swr": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/swr/-/swr-1.3.0.tgz",
+      "integrity": "sha512-dkghQrOl2ORX9HYrMDtPa7LTVHJjCTeZoB1dqTbnnEDlSvN8JEKpYIYurDfvbQFUUS8Cg8PceFVZNkW0KNNYPw=="
+    },
     "symbol-observable": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/symbol-observable/-/symbol-observable-1.0.1.tgz",
diff --git a/akvo/rsr/spa/package.json b/akvo/rsr/spa/package.json
index 95a5ffd72..bc31a94f7 100644
--- a/akvo/rsr/spa/package.json
+++ b/akvo/rsr/spa/package.json
@@ -76,6 +76,7 @@
     "reset-css": "^4.0.1",
     "simple-markdown": "^0.7.3",
     "smoothscroll-polyfill": "^0.4.4",
+    "swr": "^1.3.0",
     "yup": "^0.32.9"
   },
   "devDependencies": {
diff --git a/akvo/rsr/tests/rest/test_indicator_period_data.py b/akvo/rsr/tests/rest/test_indicator_period_data.py
index 9b754f7fd..bf4ed4fa1 100644
--- a/akvo/rsr/tests/rest/test_indicator_period_data.py
+++ b/akvo/rsr/tests/rest/test_indicator_period_data.py
@@ -1845,3 +1845,63 @@ class IndicatorPeriodDataCollaborateDraftTestCase(BaseTestCase):
 
         self.assertEqual(204, response.status_code)
         self.assertEqual(0, project.get_period(period_start=date(2010, 1, 1)).object.data.count())
+
+
+class IndicatorUpdatesByPeriodIdTestCase(BaseTestCase):
+    def _setup_admin(self):
+        admin = self.create_user("user@akvo.org", "password", is_admin=True)
+        self.c.login(username=admin.username, password="password")
+        return admin
+
+    def _setup_program(self):
+        org = self.create_organisation('Acme Org')
+        return ProjectFixtureBuilder()\
+            .with_title('Program #1')\
+            .with_partner(org, Partnership.IATI_REPORTING_ORGANISATION)\
+            .with_results([
+                {
+                    'title': 'Result #1',
+                    'indicators': [
+                        {
+                            'title': 'Indicator #1',
+                            'periods': [
+                                {
+                                    'period_start': '2010-1-1',
+                                    'period_end': '2010-12-31',
+                                },
+                            ],
+                        },
+                    ]
+                },
+            ])\
+            .with_contributors([
+                {'title': 'Project #1'},
+                {'title': 'Project #2'},
+                {'title': 'Project #3'},
+            ])\
+            .build()
+
+    def setUp(self):
+        super().setUp()
+        self.admin = self._setup_admin()
+        self.program = self._setup_program()
+        self.project1 = self.program.get_contributor(title='Project #1')
+        self.project2 = self.program.get_contributor(title='Project #2')
+        self.project3 = self.program.get_contributor(title='Project #3')
+
+    def test_get_updates(self):
+        period1 = self.project1.get_period(period_start='2010-1-1')
+        period2 = self.project2.get_period(period_start='2010-1-1')
+        period3 = self.project3.get_period(period_start='2010-1-1')
+        update1 = period1.add_update(self.admin, 1)
+        update2 = period2.add_update(self.admin, 1)
+
+        print(period1.id, period2.id, period3.id)
+        print(update1.id, update2.id)
+
+        response = self.c.get(
+            f"/rest/v1/program/{self.program.id}/indicator_updates_by_period_id/?ids={period1.id},{period2.id},{period3.id}",
+            content_type='application/json'
+        )
+        data = response.data
+        self.assertEqual({update1.id, update2.id}, {u['id'] for u in data})
diff --git a/akvo/rsr/tests/utils.py b/akvo/rsr/tests/utils.py
index 115fd1a29..b5dd585c8 100644
--- a/akvo/rsr/tests/utils.py
+++ b/akvo/rsr/tests/utils.py
@@ -139,6 +139,9 @@ class ProjectFacade(object):
         self.project = project
         self._descendants = None
 
+    def __getattr__(self, attr):
+        return getattr(self.project, attr)
+
     @property
     def object(self):
         return self.project
-- 
2.37.1 (Apple Git-137.1)

