/*---------------------------------------------------------------------------------

        Title:          RSR v3 functions and library

/*---------------------------------------------------------------------------------*/

                        /* Colours
---------------------------------------------------------------------------------*/

/* Akvo Primary Colours:    */
$akvoPurple: rgb(44, 42, 116);

/* Akvo Purplish Blue */
$rsrBlue: rgb(44, 42, 116);

$rsrBlue2: rgb(114, 205, 255);

/* Akvo very light blue */
$flowOrange: rgb(222, 137, 41);

/* Akvo Orange / light Brown */
$openaidYellow: rgb(255, 210, 0);

/* Akvo Yellow */
$akvopediaPink: rgb(191, 131, 185);

/* Akvo Pink*/
$akvoTvRed: rgb(238, 49, 36);

/* Akvo Red*/
$primary4: rgb(153, 153, 153);

/* Akvo Mid grey */
$primary5: rgb(57, 102, 128);

/* Akvo Darker shade Blue from light blue */
$primary6: rgb(107, 134, 141);

/* Akvo link blue */
$akvoLink: rgb(55, 146, 179);

/* Akvo black */
$akvoBlack: rgb(32, 32, 36);

$anchorLinkHeader: rgb(102, 204, 255);
$anchorLink: #428bca;

$veryLightOrange: complement($rsrBlue2);

$anchorLinkHover: complement($anchorLink);
$btnColor: rgb(78, 193, 234);

$rsrGreen: rgb(0, 167, 157);
$rsrHeader: #F6FBFB;

/* Akvo Secondary Colours:    */
$secondary1: rgb(225, 237, 195);

/* Akvo very Light green */
$secondary2: rgb(227, 27, 35);

/* Akvo red */
$secondary3: rgb(219, 135, 201);

/* Akvo Pink */
$secondary5: rgb(125, 125, 125);

/* Akvo Darker Grey */
$secondary6: rgb(66, 76, 43);

/* Akvo Very dark Green (Military) */
$secondary7: rgb(119, 97, 0);

/* Akvo Kaki (Greenish Brown) */
$secondary8: rgb(242, 240, 230);

/* Akvo Off White */
$secondary9: rgb(74, 177, 207);

/* Akvo darkish blue / Water Point */

$lightOrange: rgb(253, 242, 232);

$progressSuccess: #5cb85c;
$progressNot: #f0ad4e;
$progressWarning: #d9534f;

$newResultColor: rgb(100, 99, 99);

$bodyFont: "Helvetica Neue", Helvetica, Arial, sans-serif;
$scriptFont: "Baskerville", "Goudy Old Style", "Palatino", "Book Antiqua", Georgia, serif;
$titleFont: "Helvetica Neue", Helvetica, Arial, sans-serif;

@mixin flex($value) {
    -webkit-box-flex: $value;
    -moz-box-flex: $value;
    -webkit-flex: $value;
    -ms-flex: $value;
    flex: $value;
}

@mixin display-flex {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin border-radius($property) {
    -moz-border-radius: $property;
    -o-border-radius: $property;
    -webkit-border-radius: $property;
    border-radius: $property;
}

@mixin box-shadow($boxshadow...) {
    -moz-box-shadow: $boxshadow;
    -o-box-shadow: $boxshadow;
    -webkit-box-shadow: $boxshadow;
    box-shadow: $boxshadow;
}

@mixin background-size($backgroundSize...) {
    -moz-background-size: $backgroundSize;
    -o-background-size: $backgroundSize;
    -webkit-background-size: $backgroundSize;
    background-size: $backgroundSize;
}

@mixin transition($transitonProperties) {
    -moz-transition: $transitonProperties;
    -o-transition: $transitonProperties;
    -webkit-transition: $transitonProperties;
    transition: $transitonProperties;
}

@mixin noWrapTxt {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin noWrapBlockTxt {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
}

@mixin opacity($opacity) {
    opacity: $opacity;

    $opacity-ie: $opacity * 100;

    filter: alpha(opacity = $opacity-ie);

    //IE8
}

@mixin border-radius($property) {
    -moz-border-radius: $property;
    -o-border-radius: $property;
    -webkit-border-radius: $property;
    border-radius: $property;
}

@mixin box-sizing($boxSizingProperties) {
    -moz-box-sizing: $boxSizingProperties;
    -webkit-box-sizing: $boxSizingProperties;
    box-sizing: $boxSizingProperties;
}

/* Media Queries
  ========================================================================== */
$xtra-small: 568px;
$width-small: 768px;
$width-medium: 992px;
$width-middle: 1024px;
$width-large: 1200px;

@mixin responsive($width) {
    @if $width == wide-screens {
        @media only screen and (min-width: $width-large) {
            @content;
        }
    }
    @else if $width == mediums-screens {
        @media only screen and (min-width: $width-medium) {
            @content;
        }
    }
    @else if $width == small-screens {
        @media only screen and (min-width: $width-small) {
            @content;
        }
    }
    @else if $width == wide-max-screens {
        @media only screen and (max-width: $width-large) {
            @content;
        }
    }
    @else if $width == mediums-max-screens {
        @media only screen and (max-width: $width-medium) {
            @content;
        }
    }
    @else if $width == small-max-screens {
        @media only screen and (max-width: $width-small) {
            @content;
        }
    }
    @else if $width == xtra-small-max-screens {
        @media only screen and (max-width: $xtra-small) {
            @content;
        }
    }
    @else if $width == ipadAir {
        @media only screen and (min-width: $width-small) and (max-width: $width-middle) {
            @content;
        }
    }
    @else if $width == retina {
        @media only screen and (-webkit-min-device-pixel-ratio: 2) {
            @content;
        }
    }
    @else if $width == tablets {
        @media only screen and (max-width: $width-middle) {
            @content;
        }
    }
}

/* Placeholder
  ========================================================================== */

@mixin placeholder-color($color) {
    &.placeholder {
        color: $color;
    }

    &:-moz-placeholder {
        color: $color;
    }

    &::-webkit-input-placeholder {
        color: $color;
    }

    &:-ms-input-placeholder {
        color: $color;
    }

    &::-moz-placeholder {
        color: $color;
    }

    &::-moz-placeholder {
        /* Firefox 19+ */
        color: $color;
    }
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes $animation-name {
        @content;
    }

    @-moz-keyframes $animation-name {
        @content;
    }

    @-ms-keyframes $animation-name {
        @content;
    }

    @-o-keyframes $animation-name {
        @content;
    }

    @keyframes $animation-name {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

$default-transition-property: all !default;
$default-transition-duration: 1s !default;
$default-transition-function: null !default;
$default-transition-delay: null !default;
$transitionable-prefixed-values: transform, transform-origin !default;

@mixin transition-property($properties...) {
    $properties: set-arglist-default($properties, $default-transition-property);

    @include with-each-prefix(css-transitions, $transition-support-threshold) {
        $props: if($current-prefix, prefixed-for-transition($current-prefix, $properties), $properties);

        @include prefix-prop(transition-property, $props);
    }
}

@mixin transition-duration($durations...) {
    $durations: set-arglist-default($durations, $default-transition-duration);

    @include prefixed-properties(css-transitions, $transition-support-threshold, (transition-duration: $durations));
}

@mixin transition-timing-function($functions...) {
    $functions: set-arglist-default($functions, $default-transition-function);

    @include prefixed-properties(css-transitions, $transition-support-threshold, (transition-timing-function: $functions));
}

@mixin transition-delay($delays...) {
    $delays: set-arglist-default($delays, $default-transition-delay);

    @include prefixed-properties(css-transitions, $transition-support-threshold, (transition-delay: $delays));
}

@function calculateRem($size) {
    $remSize: $size / 16px;

    @return $remSize * 1rem;
}

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

@mixin button($btnColor, $color) {
    /* use @extend .button on any element (a or button) or use directly in markup class="button" */
    display: inline-block;
    padding: 5px 8px;
    background-color: $btnColor;
    color: $color !important;
    text-decoration: none;
    cursor: pointer;

    @include border-radius(3px);

    border: 1px solid transparent;
    text-align: center;

    &:hover {
        background: darken($btnColor, 10%);
        color: white;
    }

    &.disabled {
        cursor: not-allowed;
        background-color: rgba(128, 128, 128, 0.1) !important;
        color: rgba(128, 128, 128, 0.4) !important;
        border: 1px solid transparent;

        &:hover {
            cursor: not-allowed;
            background-color: rgba(128, 128, 128, 0.1) !important;
            color: rgba(128, 128, 128, 0.4) !important;
            border: 1px solid transparent;
        }
    }
}

@mixin smallButton($btnColor, $color) {
    @include button($btnColor, $color);

    padding: 3px 6px;
}

@mixin btnOutline($btnColor, $color) {
    @include button($btnColor, $color);

    background-color: transparent;
    color: $btnColor !important;
    border: 1px solid $btnColor;

    &:hover {
        color: white !important;
        border: none;
        border: 1px solid $anchorLink;
        background-color: $anchorLink;
    }

    &.disabled {
        cursor: not-allowed;
        color: rgba(128, 128, 128, 0.4) !important;
        border: 1px solid rgba(128, 128, 128, 0.4);

        &:hover {
            cursor: not-allowed;
            color: rgba(128, 128, 128, 0.4) !important;
            border: 1px solid rgba(128, 128, 128, 0.4);
        }
    }
}