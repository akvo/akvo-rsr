# -*- coding: utf-8 -*-
"""
    Akvo RSR is covered by the GNU Affero General Public License.
    See more details in the license.txt file located at the root folder of the
    Akvo RSR module. For additional details on the GNU license please
    see < http://www.gnu.org/licenses/agpl.html >.
"""
import os.path

import  django.core

MANAGERS = ADMINS

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(os.path.dirname(__file__), '..', 'templates'),
        ],
        'OPTIONS': {
            'loaders': (
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ),
            'context_processors': (
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
                'akvo.rsr.context_processors.extra_context',
                'akvo.rsr.context_processors.get_current_path_without_lang',
                'akvo.rsr.context_processors.extra_pages_context',
            )
        }
    },
]

# Logging
ACCESS_LOG_FILE_FULL_NAME = os.path.join(LOG_FILE_PATH, ACCESS_LOG_FILE_NAME).replace('\\','/')
ERROR_LOG_FILE_FULL_NAME = os.path.join(LOG_FILE_PATH, ERROR_LOG_FILE_NAME).replace('\\','/')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'verbose_request': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s %(request)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'production_errors': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
        'verbose_rsr': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },

    },
    'handlers': {
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            'formatter': 'verbose_rsr',
        },
        'file':{
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': ACCESS_LOG_FILE_FULL_NAME,
            'maxBytes': 1024*1024,
            'backupCount': 4,
            'formatter': 'verbose_rsr',
        },
        'production_errors':{
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': ERROR_LOG_FILE_FULL_NAME,
            'maxBytes': 1024*1024,
            'backupCount': 4,
            'formatter': 'production_errors',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['production_errors', 'console', ],
            'level': 'ERROR',
            'propagate': False,
        },
        'akvo.rsr': {
            'handlers': ['file', 'console', ],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

CRONTAB_COMMAND_SUFFIX = '> /proc/1/fd/1 2>/proc/1/fd/2'
CRONJOBS = [
    ('* * * * *', 'django.core.management.call_command', ['iati_export']),
    ('* * * * *', 'django.core.management.call_command', ['send_report_via_email']),
    ('* * * * *', 'django.core.management.call_command', ['run_aggregation_jobs']),
    ('10 2 * * *', 'django.core.management.call_command', ['a4a_optimy_import']),
    ('0 2 * * *', 'django.core.management.call_command', ['audit_project_aggregation', '9062']),
    ('*/5 * * * *', 'django.core.management.call_command', ['perform_iati_checks']),
    ('0 0 * * *', 'django.core.management.call_command', ['cleanup_untitled_and_unpublished_projects']),
]
CRONTAB_LOCK_JOBS = True
