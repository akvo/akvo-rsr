# Memory monitoring configuration for RSR
# Adds django-prometheus and custom RSR memory monitoring capabilities

# Enable Prometheus metrics collection
# Note: Metrics are available via Django URL /metrics/ instead of separate port
# PROMETHEUS_METRICS_EXPORT_PORT = 8001
# PROMETHEUS_METRICS_EXPORT_ADDRESS = ''

# RSR Memory Monitoring Configuration
# Enable memory monitoring for production (can be overridden via environment variables)
RSR_MEMORY_MONITORING_ENABLED = os.environ.get('RSR_MEMORY_MONITORING_ENABLED', 'true').lower() == 'true'
RSR_MEMORY_DETAILED_TRACKING = os.environ.get('RSR_MEMORY_DETAILED_TRACKING', 'false').lower() == 'true'  # Enable for dev/debug only
RSR_MEMORY_HEADER_PREFIX = os.environ.get('RSR_MEMORY_HEADER_PREFIX', 'X-RSR-Memory')
RSR_MEMORY_METRICS_UPDATE_INTERVAL = int(os.environ.get('RSR_MEMORY_METRICS_UPDATE_INTERVAL', '300'))  # 5 minutes
RSR_MEMORY_HIGH_USAGE_THRESHOLD_MB = float(os.environ.get('RSR_MEMORY_HIGH_USAGE_THRESHOLD_MB', '50.0'))

# Cache metrics configuration
RSR_CACHE_METRICS_ENABLED = os.environ.get('RSR_CACHE_METRICS_ENABLED', 'true').lower() == 'true'
RSR_CACHE_METRICS_UPDATE_FREQUENCY = int(os.environ.get('RSR_CACHE_METRICS_UPDATE_FREQUENCY', '60'))  # 1 minute

# Enhanced leak detection configuration
RSR_LEAK_DETECTION_ENABLED = os.environ.get('RSR_LEAK_DETECTION_ENABLED', 'true').lower() == 'true'
RSR_LEAK_CHECK_INTERVAL = int(os.environ.get('RSR_LEAK_CHECK_INTERVAL', '300'))  # 5 minutes
RSR_LEAK_GROWTH_THRESHOLD = float(os.environ.get('RSR_LEAK_GROWTH_THRESHOLD', '0.2'))  # 20% growth
RSR_LEAK_MEMORY_THRESHOLD_MB = float(os.environ.get('RSR_LEAK_MEMORY_THRESHOLD_MB', '100.0'))
RSR_LEAK_MODEL_GROWTH_THRESHOLD = float(os.environ.get('RSR_LEAK_MODEL_GROWTH_THRESHOLD', '1.0'))  # 100% model growth

# Deep memory profiling with memray (disabled by default for production)
RSR_PROFILING_ENABLED = os.environ.get('RSR_PROFILING_ENABLED', 'false').lower() == 'true'
RSR_PROFILING_OUTPUT_DIR = os.environ.get('RSR_PROFILING_OUTPUT_DIR', '/tmp/rsr_memory_profiles')
RSR_MAX_PROFILE_SIZE_MB = int(os.environ.get('RSR_MAX_PROFILE_SIZE_MB', '100'))
RSR_PROFILING_CLEANUP_DAYS = int(os.environ.get('RSR_PROFILING_CLEANUP_DAYS', '7'))
RSR_PROFILING_REQUEST_PROBABILITY = float(os.environ.get('RSR_PROFILING_REQUEST_PROBABILITY', '0.01'))  # 1%

# Prometheus metrics configuration
RSR_PROMETHEUS_METRICS_ENABLED = os.environ.get('RSR_PROMETHEUS_METRICS_ENABLED', 'true').lower() == 'true'

# Add prometheus and memory monitoring middleware
if 'django_prometheus.middleware.PrometheusBeforeMiddleware' not in MIDDLEWARE:
    MIDDLEWARE = ['django_prometheus.middleware.PrometheusBeforeMiddleware'] + list(MIDDLEWARE)

# Add RSR memory monitoring middleware after prometheus (only if memory monitoring is enabled)
if RSR_MEMORY_MONITORING_ENABLED and 'akvo.rsr.memory_monitoring.middleware.RSRMemoryMonitoringMiddleware' not in MIDDLEWARE:
    middleware_list = list(MIDDLEWARE)
    prometheus_index = middleware_list.index('django_prometheus.middleware.PrometheusBeforeMiddleware')
    middleware_list.insert(prometheus_index + 1, 'akvo.rsr.memory_monitoring.middleware.RSRMemoryMonitoringMiddleware')
    MIDDLEWARE = middleware_list

# Add cache metrics middleware after memory monitoring middleware (only if cache metrics are enabled)
if RSR_CACHE_METRICS_ENABLED and 'akvo.rsr.memory_monitoring.middleware.RSRCacheMetricsMiddleware' not in MIDDLEWARE:
    middleware_list = list(MIDDLEWARE)
    # Find position after RSRMemoryMonitoringMiddleware if it exists, otherwise after PrometheusBeforeMiddleware
    if 'akvo.rsr.memory_monitoring.middleware.RSRMemoryMonitoringMiddleware' in middleware_list:
        insert_index = middleware_list.index('akvo.rsr.memory_monitoring.middleware.RSRMemoryMonitoringMiddleware') + 1
    else:
        insert_index = middleware_list.index('django_prometheus.middleware.PrometheusBeforeMiddleware') + 1
    middleware_list.insert(insert_index, 'akvo.rsr.memory_monitoring.middleware.RSRCacheMetricsMiddleware')
    MIDDLEWARE = middleware_list

# Add prometheus after middleware at the end
if 'django_prometheus.middleware.PrometheusAfterMiddleware' not in MIDDLEWARE:
    MIDDLEWARE = list(MIDDLEWARE) + ['django_prometheus.middleware.PrometheusAfterMiddleware']

# Add prometheus to installed apps
if 'django_prometheus' not in INSTALLED_APPS:
    INSTALLED_APPS = list(INSTALLED_APPS) + ['django_prometheus']

# Configure database metrics (optional)
# DATABASES['default']['ENGINE'] = 'django_prometheus.db.backends.postgresql'

# Logging configuration for memory monitoring is added in 90-finish.conf