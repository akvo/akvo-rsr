apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rsrchart.fullname" . }}
  labels:
{{ include "rsrchart.labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "rsrchart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "rsrchart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
#        rsr-version: ${TRAVIS_COMMIT}
    spec:
      containers:
      - name: rsr-nginx
        image: eu.gcr.io/akvo-lumen/rsr-nginx:5962374643e98175c96c4c0c980103fe11127508
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "50m"
          limits:
            cpu: "1000m"
        volumeMounts:
            - name: "rsr-media-disk"
              mountPath: "/var/akvo/rsr/mediaroot"
        env:
        - name: REPORT_SERVER_API_KEY
          value: "none useful"
        - name: ENVIRONMENT
          value: "test"
        - name: REPORT_SERVER_URL
          value: "http://localhost"
      - name: rsr-backend
        image: eu.gcr.io/akvo-lumen/rsr-backend:5962374643e98175c96c4c0c980103fe11127508
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "50m"
          limits:
            cpu: "4000m"
        ports:
        - containerPort: 8000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 1
          failureThreshold: 12
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 1
          failureThreshold: 12
          periodSeconds: 10
        volumeMounts:
            - name: "secret-config"
              mountPath: "/var/akvo/rsr/code/akvo/settings/42_django.conf"
              subPath: "django.conf"
            - name: "secret-config"
              mountPath: "/var/akvo/rsr/mediaroot/fake-migration-flag"
              subPath: "django.conf"
            - name: "rsr-media-disk"
              mountPath: "/var/akvo/rsr/mediaroot"
            - name: "rsr-staticroot-disk"
              mountPath: "/var/akvo/rsr/staticroot"
        env:
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "rsr-common"
              key: smtp-password
        - name: DJANGO_SECRET_KEY
          value: "something random"
        - name: GUNICORN_DEBUG_ARGS
          value: "--workers 4"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgresql"
              key: postgresql-password
        - name: DB_HOST
          value: "{{ include "rsrchart.dbname" . }}"
        - name: RSR_DOMAIN_NAME
#          value: "{{ .Release.Name }}.rsrdemo.akvotest.org" ;; to change once LetsEncrypt is working
          value: "{{ .Release.Name }}.akvotest.org"
      - name: rsr-memcached
        image: memcached:1.5.9-alpine
        resources:
          requests:
            cpu: "50m"
          limits:
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "echo stats | nc 127.0.0.1 11211 | grep version"
          initialDelaySeconds: 10
          periodSeconds: 5
      initContainers:
      - name: copy-assets-to-backend-container
        image: eu.gcr.io/akvo-lumen/rsr-nginx:5962374643e98175c96c4c0c980103fe11127508
        command: [sh, -c]
        args: ["cp -r /var/akvo/rsr/staticroot/* /data"]
        imagePullPolicy: Always
        volumeMounts:
          - mountPath: /data
            name: "rsr-staticroot-disk"
      volumes:
         - name: rsr-staticroot-disk
           emptyDir: {}
         - name: "secret-config"
           secret:
             secretName: {{ include "rsrchart.fullname" . }}
         - name: rsr-media-disk
           persistentVolumeClaim:
             claimName: {{ include "rsrchart.fullname" . }}
