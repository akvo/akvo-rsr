postgresql:
  livenessProbe:
    initialDelaySeconds: 600

  image:
    repository: akvo/akvo-rsr-demo-postgres
    tag: 20190604.104919.c35d39d
  postgresqlUsername: postgres
  extraEnv:
    - name: ELEPHANTSQL_API_KEY
      valueFrom:
        secretKeyRef:
          name: "rsr-common"
          key: elephantsql-api-key
  initdbScripts:
    a-run.sh: |
      #!/usr/bin/env bash
      set -eu

      if [ -f "/bitnami/postgresql/first-run" ]; then
        echo "For some reason, the output of this script does not show in the logs when it is run for the very first time when using our postgres image, which is based in postgres 9.6."
        echo "We do not expect this script to fail at all, but we have detected that this is the second time this script is run, hence something that should not fail has failed"
        echo "Exiting with success now so that you can log to this container and manually check what went wrong, probably by selectively running commands in this same script"
        exit 0
      fi

      echo "Creating flag file"
      echo "$(date)" >> /bitnami/postgresql/first-run

      DB_HOST="localhost"
      SUPER_USER=${POSTGRES_USER}
      NEW_DB_NAME="rsrdbname"
      NEW_USER="foobarbar"
      NEW_USER_PASSWORD=${POSTGRES_PASSWORD}

      psql_settings=("--username=${SUPER_USER}" "--host=${DB_HOST}")
      export PGPASSWORD="${POSTGRES_PASSWORD}"

      psql "${psql_settings[@]}" --command="CREATE USER ${NEW_USER} WITH ENCRYPTED PASSWORD '${NEW_USER_PASSWORD}';"
      psql "${psql_settings[@]}" --command="CREATE DATABASE ${NEW_DB_NAME} OWNER ${NEW_USER};"
      psql "${psql_settings[@]}" --dbname="${NEW_DB_NAME}" --command="ALTER SCHEMA public OWNER TO ${NEW_USER};"

      DUMP_FILE=/tmp/backup.lzo
      RSR_DB_USER=$NEW_USER
      RSR_DB_NAME=$NEW_DB_NAME

      curl -u :${ELEPHANTSQL_API_KEY}  https://api.elephantsql.com/api/backup?db=rsr_db | jq .[0].url | xargs curl --output "${DUMP_FILE}"

      #dump_owner=$(lzop -cd "${DUMP_FILE}" | head -n 2000 | grep "Owner: [a-z].*" -o | head -n 1 | cut -f 2 -d\ )

      dump_owner=rsr_db_user

      echo "done!"

      psql_settings=("--username=${SUPER_USER}" "--host=${DB_HOST}" "--dbname=${RSR_DB_NAME}" "--set" "ON_ERROR_STOP=on")
      echo "settings again!"
      lzop -cd "${DUMP_FILE}" | sed -e "s/${dump_owner}/${RSR_DB_USER}/" | sed -e "/^GRANT/d" | sed -e "/ALTER DEFAULT PRIVILEGES/d"| sed -e '/NOT EXISTS plv8/d' | sed -e '/ON EXTENSION plv8/d' | sed -e '/COPY public.django_session/,/^--/d' | sed -e '/COPY public.rsr_iatiimportlog/,/^--/d' | sed -e '/COPY public.rsr_iatiactivityimport/,/^--/d' | sed -e '/COPY public.django_admin_log/,/^--/d' > /tmp/tdump

      wc -l /tmp/tdump

      echo "veyr done!"

      cat /tmp/tdump | psql "${psql_settings[@]}"
      rm /tmp/tdump
      rm $DUMP_FILE
      echo "done!!!!!!"

      exit 0