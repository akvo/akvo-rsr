apiVersion: apps/v1
kind: Deployment
metadata:
  name: rsr
spec:
  replicas: 1
  selector:
    matchLabels:
      run: rsr
      app: rsr
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: rsr
        rsr-version: ${TRAVIS_COMMIT}
        app: rsr
      annotations:
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: rsr-nginx
        image: eu.gcr.io/akvo-lumen/rsr-nginx:${TRAVIS_COMMIT}
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 8081
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          requests:
            cpu: "50m"
          limits:
            cpu: "1000m"
        env:
        - name: REPORT_SERVER_API_KEY
          valueFrom:
            secretKeyRef:
              name: "rsr-secret"
              key: report-server-api-key
        - name: GOOGLE_STORAGE_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: akvo-rsr
              key: google-storege-bucket-name
        - name: DJANGO_DEFAULT_FILE_STORAGE
          valueFrom:
              configMapKeyRef:
                name: akvo-rsr
                key: default-file-storage
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: "akvo"
              key: "environment"
        - name: REPORT_SERVER_URL
          valueFrom:
            secretKeyRef:
              name: "rsr-secret"
              key: report-server-url
      - &backend
        name: rsr-backend
        image: eu.gcr.io/akvo-lumen/rsr-backend:${TRAVIS_COMMIT}
        resources:
          requests:
            cpu: "1000m"
          limits:
            cpu: "4000m"
        ports:
        - containerPort: 8000
          protocol: TCP
        livenessProbe: &liveness
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 1
          failureThreshold: 12
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 1
          failureThreshold: 12
          periodSeconds: 10
        volumeMounts:
            - name: "secret-config"
              mountPath: "/var/akvo/rsr/code/akvo/akvo-lumen-service-account-credentials.json"
              subPath: "google-cloud-storage.json"
            - name: "secret-config"
              mountPath: "/var/akvo/rsr/code/akvo/settings/42_django.conf"
              subPath: "django.conf"
            - name: "secret-config"
              mountPath: "/rsr/mediasync/rsrleech_id_rsa"
              subPath: "rsrleech_id_rsa"
            - name: "secret-config"
              mountPath: "/rsr/mediasync/media-sync.sh"
              subPath: "media-sync.sh"
            - name: "rsr-staticroot-disk"
              mountPath: "/var/akvo/rsr/staticroot"
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/akvo/rsr/code/akvo/akvo-lumen-service-account-credentials.json"
        - name: DEFAULT_FILE_STORAGE
          valueFrom:
              configMapKeyRef:
                name: akvo-rsr
                key: default-file-storage
        - name: GOOGLE_STORAGE_BUCKET
          valueFrom:
              configMapKeyRef:
                name: akvo-rsr
                key: google-storege-bucket-name
        - &sentry-dsn
          name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: "rsr-secret"
              key: sentry-dsn
        - &mapbox-key
          name: MAPBOX_KEY
          valueFrom:
            secretKeyRef:
              name: "rsr-secret"
              key: mapbox-key
        - &gunicorn-debug-args
          name: GUNICORN_DEBUG_ARGS
          valueFrom:
            secretKeyRef:
              name: "rsr-secret"
              key: gunicorn-debug
        - &django-secret-key
          name: DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "rsr-secret"
              key: django-secret-key
        - &enable-stats
          name: ENABLE_STATS
          value: "yes please"
      - <<: *backend
        name: rsr-reports
        ports:
        - containerPort: 9000
          protocol: TCP
        livenessProbe:
          <<: *liveness
          httpGet:
            path: /healthz
            port: 9000
        resources:
          requests:
            cpu: "100m"
          limits:
            cpu: "1000m"
        env:
        - name: IS_REPORTS_CONTAINER
          value: "yes"
        - name: DJANGO_PORT
          value: "9000"
        - <<: *sentry-dsn
        - <<: *mapbox-key
        - <<: *gunicorn-debug-args
        - <<: *django-secret-key
        - <<: *enable-stats
      - name: rsr-statsd-to-prometheus
        image: eu.gcr.io/akvo-lumen/rsr-statsd-to-prometheus:${TRAVIS_COMMIT}
        ports:
        - containerPort: 9125
        - containerPort: 9102
        livenessProbe:
          tcpSocket:
             port: 9125
          initialDelaySeconds: 5
        readinessProbe:
          tcpSocket:
             port: 9125
          initialDelaySeconds: 5
        resources:
          requests:
            cpu: "10m"
          limits:
            cpu: "100m"
      - name: cloudsql-proxy
        image: eu.gcr.io/cloudsql-docker/gce-proxy:1.16
        command: ["/cloud_sql_proxy",
                  "-instances=akvo-lumen:europe-west1:$(GOOGLE_SQL_DB_INSTANCE)=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        env:
          - name: GOOGLE_SQL_DB_INSTANCE
            valueFrom:
              configMapKeyRef:
                name: akvo-rsr
                key: google-sql-db-instance
        volumeMounts:
          - name: "secret-config"
            mountPath: "/secrets/cloudsql/credentials.json"
            subPath: "cloud-database-service-account.json"
            readOnly: true
      initContainers:
      - name: copy-assets-to-backend-container
        image: eu.gcr.io/akvo-lumen/rsr-nginx:${TRAVIS_COMMIT}
        command: [sh, -c]
        args: ["cp -r /var/akvo/rsr/staticroot/* /data"]
        volumeMounts:
          - mountPath: /data
            name: "rsr-staticroot-disk"
      volumes:
         - name: rsr-staticroot-disk
           emptyDir: {}
         - name: "secret-config"
           secret:
             secretName: "rsr-secret"