apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-postgresql-seed-db
data:
  seed-db.sh: |-
      #!/usr/bin/env bash
      set -eu

      function log {
         echo "$(date +"%T") - DB SEEDING INFO - $*"
      }

      if [ -f "/bitnami/postgresql/first-run" ]; then
        echo "For some reason, the output of this script does not show in the logs when it is run for the very first time when using our postgres image, which is based in postgres 9.6."
        echo "We do not expect this script to fail at all, but we have detected that this is the second time this script is run, hence something that should not fail has failed"
        echo "Exiting with success now so that you can log to this container and manually check what went wrong, probably by selectively running commands in this same script"
        exit 0
      fi

      log Log in to gcloud
      mkdir /tmp/thehome
      export HOME=/tmp/thehome
      gcloud auth activate-service-account --key-file /akvo-lumen-service-account-credentials.json

      log Creating flag file
      echo "$(date)" >> /bitnami/postgresql/first-run

      DB_HOST="localhost"
      SUPER_USER=${POSTGRES_USER}
      RSR_DB_USER="rsrdbusername"
      RSR_DB_NAME="rsrdbname"
      RSR_USER_PASSWORD=${POSTGRES_PASSWORD}

      psql_settings=("--username=${SUPER_USER}" "--host=${DB_HOST}")
      export PGPASSWORD="${POSTGRES_PASSWORD}"

      log Create RSR user
      psql "${psql_settings[@]}" --command="CREATE USER ${RSR_DB_USER} WITH ENCRYPTED PASSWORD '${RSR_USER_PASSWORD}';"
      log Create RSR DB
      psql "${psql_settings[@]}" --command="CREATE DATABASE ${RSR_DB_NAME} OWNER ${RSR_DB_USER};"
      log Assign perms to RSR user in RSR DB
      psql "${psql_settings[@]}" --dbname="${RSR_DB_NAME}" --command="ALTER SCHEMA public OWNER TO ${RSR_DB_USER};"

      DUMP_FILE=/tmp/backup.gz
      if [[ "{{.Values.restoreFrom}}" == "prod" ]]; then

        gsutil cp gs://akvo-rsr-db-dump/rsr.prod.{{ .Release.Name }}.dump.gz $DUMP_FILE

        psql_settings=("--username=${RSR_DB_USER}" "--host=${DB_HOST}" "--dbname=${RSR_DB_NAME}" "--set" "ON_ERROR_STOP=on")

        psql "${psql_settings[@]}" --command="DROP SCHEMA public CASCADE"
        psql "${psql_settings[@]}" --command="CREATE SCHEMA public"
        gunzip --stdout "${DUMP_FILE}" \
          | sed -e "/rsr_db_test_reportserver_user/d" \
          | sed -e "/rsr_db_readonly_reportserver/d" \
          | sed -e "/rsr_reportserver_db_user/d" \
          | sed -e "/ALTER DEFAULT PRIVILEGES FOR ROLE postgres/d" \
          | sed -e '/NOT EXISTS plv8/d' | sed -e '/ON EXTENSION plv8/d' \
          | sed -e '/COPY public.django_session/,/^--/d' \
          | sed -e '/COPY public.rsr_iatiimportlog/,/^--/d' \
          | sed -e '/COPY public.rsr_iatiactivityimport/,/^--/d' \
          | sed -e '/COPY public.django_admin_log/,/^--/d' \
          | psql "${psql_settings[@]}"

        ## Changing owner of objects, remove any permission related statements and removing some huge tables of no use in the new environment
        ## We also remove the plv8 extension as the Postgres container doesnt have it, it is not trivial to add and RSR is not using it.

        rm $DUMP_FILE

      fi

      log Creating ReportServer read-only user
      REPORTSERVER_DB_USER=${REPORTSERVER_DB_USER}
      REPORTSERVER_USER_PASSWORD=${REPORTSERVER_USER_PASSWORD}
      REPORTSERVER_DB_NAME=${REPORTSERVER_DB_NAME}

      psql_settings=("--username=${SUPER_USER}" "--host=${DB_HOST}" "--set" "ON_ERROR_STOP=on")
      psql "${psql_settings[@]}" --command="CREATE USER ${REPORTSERVER_DB_USER} WITH ENCRYPTED PASSWORD '${REPORTSERVER_USER_PASSWORD}';"
      log Assinging read-only permissions to ReportServer user
      psql_settings=("--username=${SUPER_USER}" "--host=${DB_HOST}" "--dbname=${RSR_DB_NAME}" "--set" "ON_ERROR_STOP=on")
      psql "${psql_settings[@]}" --command="GRANT USAGE ON SCHEMA public TO ${REPORTSERVER_DB_USER};"
      psql "${psql_settings[@]}" --command="GRANT SELECT ON ALL TABLES IN SCHEMA public TO ${REPORTSERVER_DB_USER};"
      psql "${psql_settings[@]}" --command="ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO ${REPORTSERVER_DB_USER};"

      log Creating ReportServer DB
      psql_settings=("--username=${SUPER_USER}" "--host=${DB_HOST}" "--set" "ON_ERROR_STOP=on")
      psql "${psql_settings[@]}" --command="CREATE DATABASE ${REPORTSERVER_DB_NAME} OWNER ${REPORTSERVER_DB_USER};"
      log Assign perms to ReportServer user in ReportServer DB
      psql "${psql_settings[@]}" --dbname="${REPORTSERVER_DB_NAME}" --command="ALTER SCHEMA public OWNER TO ${REPORTSERVER_DB_USER};"

      log Downloading latest production ReportServer backup
      gsutil cp gs://akvo-rsr-db-dump/reportserver.prod.{{ .Release.Name }}.dump.gz $DUMP_FILE
      log Preparing ReportServer DB dump
      export PGPASSWORD="${REPORTSERVER_USER_PASSWORD}"
      psql_settings=("--username=${REPORTSERVER_DB_USER}" "--host=${DB_HOST}" "--dbname=${REPORTSERVER_DB_NAME}" "--set" "ON_ERROR_STOP=on")

      gunzip --stdout "${DUMP_FILE}" | \
        sed -e '/COPY public.rs_audit_log_property/,/^--/d' | \
        sed -e "/^GRANT/d" | sed -e "/ALTER DEFAULT PRIVILEGES/d" | \
        sed -e "/^REVOKE/d" | \
        sed -e '/spatial_ref_sys/,+1 d' | \
        sed -e '/NOT EXISTS plv8/d' | sed -e '/ON EXTENSION plv8/d' | \
        sed -e '/NOT EXISTS "uuid-ossp/d' | sed -e '/ON EXTENSION "uuid-ossp/d' | \
        sed -e '/NOT EXISTS postgis/d' | sed -e '/ON EXTENSION postgis/d' | \
        psql "${psql_settings[@]}"

      log Deleting ReportServer tmp files
      rm $DUMP_FILE

      log Changing credentials of ReportServer datasource
      ## Removing the internal datasource so that it doesnt point to production
      db_external_host=$(echo $HOSTNAME | cut -f1-2 -d\-)
      internal_datasource_user=rsr_reportserver_db_user
      psql "${psql_settings[@]}" --command="UPDATE rs_database_datasource SET username='none', password='none' WHERE username='$internal_datasource_user'"
      psql "${psql_settings[@]}" --command="UPDATE rs_database_datasource SET username='${REPORTSERVER_DB_USER}', password='${ENCRYPTED_RSR_PASSWORD}', url='jdbc:postgresql://${db_external_host}:5432/${RSR_DB_NAME}' WHERE username='rsr_db_readonly_reportserver'"


      log Done
      exit 0
